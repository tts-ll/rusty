Terminals unused in grammar

   AS
   SHL
   SHR
   BITAND
   BITXOR
   RANGE
   BITAND_ASSIGN
   BITXOR_ASSIGN
   BITOR_ASSIGN
   SHL_ASSIGN
   SHR_ASSIGN
   DIRECTIVE
   DIRECTIVE_FEATURE
   APOST
   DOLLAR
   TRIPLE_DOT
   ABSTRACT
   ALIGNOF
   BE
   BREAK
   CASE
   CONST
   CONTINUE
   CRATE
   DO
   EXTERN
   FINAL
   FOR
   IMPL
   IN
   MACRO
   MACRO_RULES
   MOD
   MOVE
   OFFSETOF
   OVERRIDE
   PRIV
   PUB
   PURE
   SIZEOF
   STATIC
   SELF
   SUPER
   TRAIT
   TYPE
   TYPEOF
   UNKNOWN
   UNSAFE
   UNSIZED
   USE
   VIRTUAL
   WHERE
   YIELD
   UNIT
   U16
   U32
   U64
   I8
   I16
   I64
   F32
   F64
   USIZE
   ISIZE
   CHAR
   STR
   FLSUFFi
   EXCOMMA_L
   EXCOMMA_H
   NOT
   FNCALLEXP
   FLUPSHIFT
   NULLLIST
   END


Grammar

    0 $accept: program $end

    1 program: crate

    2 crate: items

    3 items: item items
    4      | item

    5 item: fn-def
    6     | enum-def
    7     | struct-def

    8 fn-def: FN ID LPAREN RPAREN block
    9       | FN ID LPAREN RPAREN FUNCTION_ARROW ret block
   10       | FN ID LPAREN fn-params RPAREN block
   11       | FN ID LPAREN fn-params RPAREN FUNCTION_ARROW ret block
   12       | FN ID LPAREN fn-params RPAREN FUNCTION_ARROW EXCLAMATION block
   13       | FN ID LPAREN RPAREN FUNCTION_ARROW EXCLAMATION block

   14 fn-params: fn-param COMMA fn-params
   15          | fn-param

   16 fn-param: pat-type-annot

   17 pat-type-annot: pat COLON type

   18 ret: type

   19 enum-def: ENUM ID LCURLY enum-ctor-defs RCURLY

   20 enum-ctor-defs: enum-ctor-def COMMA enum-ctor-defs
   21               | enum-ctor-def

   22 enum-ctor-def: ID
   23              | ID LPAREN ctor-types RPAREN

   24 ctor-types: type COMMA ctor-types
   25           | type

   26 struct-def: STRUCT ID LCURLY type-annots RCURLY

   27 type-annots: type-annot COMMA type-annots
   28            | type-annot

   29 type-annot: ID COLON type

   30 block: LCURLY stmts RCURLY
   31      | LCURLY RCURLY

   32 stmts: stmt stmts
   33      | stmt
   34      | exp

   35 stmt: exp SEMICOLON
   36     | RETURN exp SEMICOLON
   37     | RETURN SEMICOLON
   38     | let SEMICOLON
   39     | PRINTI LPAREN exps RPAREN SEMICOLON
   40     | PRINTS LPAREN exps RPAREN SEMICOLON

   41 let: LET pat
   42    | LET pat COLON type ASSIGNMENT exp
   43    | LET pat ASSIGNMENT exp
   44    | LET pat COLON type

   45 exp: literal
   46    | LPAREN exp RPAREN
   47    | ID
   48    | LPAREN RPAREN
   49    | or
   50    | and
   51    | eq
   52    | neq
   53    | lt
   54    | gt
   55    | geq
   56    | leq
   57    | add
   58    | sub
   59    | mul
   60    | div
   61    | rem
   62    | neg
   63    | not
   64    | deref
   65    | addr-of
   66    | addr-of-mut
   67    | assign
   68    | fn-call
   69    | if
   70    | while
   71    | loop
   72    | box-new
   73    | arr-index
   74    | flup
   75    | match

   76 or: exp BOOL_OR exp

   77 and: exp BOOL_AND exp

   78 eq: exp EQ exp

   79 neq: exp NE exp

   80 lt: exp LT exp

   81 gt: exp GT exp

   82 leq: exp LE exp

   83 geq: exp GE exp

   84 add: exp ADD exp

   85 sub: exp NEGATIVE_SIGN exp

   86 mul: exp ASTERISK exp

   87 div: exp DIV exp

   88 rem: exp REM exp

   89 neg: NEGATIVE_SIGN exp

   90 not: EXCLAMATION exp

   91 deref: ASTERISK exp

   92 addr-of: ADDRESS exp

   93 addr-of-mut: ADDRESS MUT exp

   94 assign: exp PLUS_ASSIGN exp
   95       | exp SUB_ASSIGN exp
   96       | exp MUL_ASSIGN exp
   97       | exp DIV_ASSIGN exp
   98       | exp REM_ASSIGN exp
   99       | exp ASSIGNMENT exp

  100 fn-call: ID LPAREN exps RPAREN
  101        | ID LPAREN RPAREN

  102 exps: exp COMMA exps
  103     | exp

  104 if: IF LPAREN exp RPAREN block ELSE block
  105   | IF LPAREN exp RPAREN block

  106 while: WHILE LPAREN exp RPAREN block

  107 loop: LOOP block

  108 box-new: BOX PATH NEW LPAREN exp RPAREN

  109 arr-index: exp LSQUARE exp RSQUARE

  110 flup: exp DOT exp

  111 match: MATCH LPAREN exp RPAREN LCURLY match-arms RCURLY

  112 match-arms: match-arm COMMA match-arms
  113           | match-arm

  114 match-arm: pat-or MATCH_ARROW block

  115 pat-or: pat BITOR pat-or
  116       | pat

  117 pat: name-bind
  118    | prim-lit
  119    | NEGATIVE_SIGN
  120    | LPAREN RPAREN
  121    | pat-deref
  122    | UNDERSCORE
  123    | pat-arr
  124    | pat-enum
  125    | pat-struct

  126 name-bind: ID
  127          | REF ID
  128          | REF MUT ID
  129          | MUT ID

  130 pat-deref: ADDRESS pat

  131 pat-arr: LSQUARE array-elmts RSQUARE

  132 pat-enum: ID PATH ID LPAREN ctor-elmts RPAREN
  133         | ID PATH ID

  134 pat-struct: ID LCURLY id-pat-annots RCURLY

  135 array-elmts: pat COMMA array-elmts
  136            | pat

  137 ctor-elmts: pat COMMA ctor-elmts
  138           | pat

  139 id-pat-annots: id-pat-annot COMMA id-pat-annots
  140              | id-pat-annot

  141 id-pat-annot: ID COLON pat

  142 type: ID
  143     | BOOL
  144     | U8
  145     | I32
  146     | LPAREN RPAREN
  147     | LSQUARE type RSQUARE
  148     | LSQUARE type SEMICOLON LITDEC RSQUARE
  149     | ADDRESS type
  150     | ADDRESS MUT type
  151     | BOX LT type GT

  152 literal: prim-lit
  153        | comp-lit

  154 prim-lit: lit-bool
  155         | LITCHAR
  156         | LITDEC
  157         | LITSTR

  158 comp-lit: lit-enum
  159         | lit-struct
  160         | lit-array

  161 lit-bool: TRU
  162         | FALS

  163 lit-enum: ID PATH ID
  164         | ID PATH ID LPAREN enum-exps RPAREN

  165 enum-exps: exp COMMA enum-exps
  166          | exp

  167 lit-struct: ID LCURLY id-exp-annots RCURLY

  168 id-exp-annots: id-exp-annot COMMA id-exp-annots
  169              | id-exp-annot

  170 id-exp-annot: ID COLON exp

  171 lit-array: LSQUARE enum-exps RSQUARE


Terminals, with rules where they appear

$end (0) 0
error (256)
BOOL_OR (258) 76
BOOL_AND (259) 77
ADD (260) 84
NEGATIVE_SIGN (261) 85 89 119
ASTERISK (262) 86 91
DIV (263) 87
EXCLAMATION (264) 12 13 90
EQ (265) 78
NE (266) 79
REM (267) 88
LT (268) 80 151
GT (269) 81 151
LE (270) 82
GE (271) 83
ADDRESS (272) 92 93 130 149 150
LPAREN (273) 8 9 10 11 12 13 23 39 40 46 48 100 101 104 105 106 108
    111 120 132 146 164
RPAREN (274) 8 9 10 11 12 13 23 39 40 46 48 100 101 104 105 106 108
    111 120 132 146 164
MUT (275) 93 128 129 150
AS (276)
SHL (277)
SHR (278)
BITAND (279)
BITXOR (280)
BITOR (281) 115
ASSIGNMENT (282) 42 43 99
RANGE (283)
PLUS_ASSIGN (284) 94
SUB_ASSIGN (285) 95
MUL_ASSIGN (286) 96
DIV_ASSIGN (287) 97
REM_ASSIGN (288) 98
BITAND_ASSIGN (289)
BITXOR_ASSIGN (290)
BITOR_ASSIGN (291)
SHL_ASSIGN (292)
SHR_ASSIGN (293)
PATH (294) 108 132 133 163 164
FUNCTION_ARROW (295) 9 11 12 13
MATCH_ARROW (296) 114
DIRECTIVE (297)
DIRECTIVE_FEATURE (298)
APOST (299)
DOLLAR (300)
LSQUARE (301) 109 131 147 148 171
RSQUARE (302) 109 131 147 148 171
LCURLY (303) 19 26 30 31 111 134 167
RCURLY (304) 19 26 30 31 111 134 167
TRIPLE_DOT (305)
DOT (306) 110
COMMA (307) 14 20 24 27 102 112 135 137 139 165 168
COLON (308) 17 29 42 44 141 170
SEMICOLON (309) 35 36 37 38 39 40 148
ABSTRACT (310)
ALIGNOF (311)
BE (312)
BOX (313) 108 151
BREAK (314)
CASE (315)
CONST (316)
CONTINUE (317)
CRATE (318)
DO (319)
ELSE (320) 104
ENUM (321) 19
EXTERN (322)
FINAL (323)
FN (324) 8 9 10 11 12 13
FOR (325)
IF (326) 104 105
IMPL (327)
IN (328)
LET (329) 41 42 43 44
LOOP (330) 107
MACRO (331)
MACRO_RULES (332)
MATCH (333) 111
MOD (334)
MOVE (335)
NEW (336) 108
OFFSETOF (337)
OVERRIDE (338)
PRIV (339)
PUB (340)
PURE (341)
REF (342) 127 128
RETURN (343) 36 37
SIZEOF (344)
STATIC (345)
SELF (346)
STRUCT (347) 26
SUPER (348)
TRAIT (349)
TYPE (350)
TYPEOF (351)
UNKNOWN (352)
UNSAFE (353)
UNSIZED (354)
USE (355)
VIRTUAL (356)
WHERE (357)
WHILE (358) 106
YIELD (359)
PRINTS (360) 40
PRINTI (361) 39
UNIT (362)
BOOL (363) 143
U8 (364) 144
U16 (365)
U32 (366)
U64 (367)
I8 (368)
I16 (369)
I32 (370) 145
I64 (371)
F32 (372)
F64 (373)
USIZE (374)
ISIZE (375)
CHAR (376)
STR (377)
UNDERSCORE (378) 122
LITDEC (379) 148 156
ID (380) 8 9 10 11 12 13 19 22 23 26 29 47 100 101 126 127 128 129
    132 133 134 141 142 163 164 167 170
LITSTR (381) 157
LITCHAR (382) 155
FALS (383) 162
TRU (384) 161
FLSUFFi (385)
EXCOMMA_L (386)
EXCOMMA_H (387)
ADDRMUT (388)
DEREF (389)
UMINUS (390)
NOT (391)
FNCALLEXP (392)
FLUPSHIFT (393)
NULLLIST (394)
END (395)


Nonterminals, with rules where they appear

$accept (141)
    on left: 0
program (142)
    on left: 1, on right: 0
crate (143)
    on left: 2, on right: 1
items (144)
    on left: 3 4, on right: 2 3
item (145)
    on left: 5 6 7, on right: 3 4
fn-def (146)
    on left: 8 9 10 11 12 13, on right: 5
fn-params (147)
    on left: 14 15, on right: 10 11 12 14
fn-param (148)
    on left: 16, on right: 14 15
pat-type-annot (149)
    on left: 17, on right: 16
ret (150)
    on left: 18, on right: 9 11
enum-def (151)
    on left: 19, on right: 6
enum-ctor-defs (152)
    on left: 20 21, on right: 19 20
enum-ctor-def (153)
    on left: 22 23, on right: 20 21
ctor-types (154)
    on left: 24 25, on right: 23 24
struct-def (155)
    on left: 26, on right: 7
type-annots (156)
    on left: 27 28, on right: 26 27
type-annot (157)
    on left: 29, on right: 27 28
block (158)
    on left: 30 31, on right: 8 9 10 11 12 13 104 105 106 107 114
stmts (159)
    on left: 32 33 34, on right: 30 32
stmt (160)
    on left: 35 36 37 38 39 40, on right: 32 33
let (161)
    on left: 41 42 43 44, on right: 38
exp (162)
    on left: 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62
    63 64 65 66 67 68 69 70 71 72 73 74 75, on right: 34 35 36 42 43
    46 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
    96 97 98 99 102 103 104 105 106 108 109 110 111 165 166 170
or (163)
    on left: 76, on right: 49
and (164)
    on left: 77, on right: 50
eq (165)
    on left: 78, on right: 51
neq (166)
    on left: 79, on right: 52
lt (167)
    on left: 80, on right: 53
gt (168)
    on left: 81, on right: 54
leq (169)
    on left: 82, on right: 56
geq (170)
    on left: 83, on right: 55
add (171)
    on left: 84, on right: 57
sub (172)
    on left: 85, on right: 58
mul (173)
    on left: 86, on right: 59
div (174)
    on left: 87, on right: 60
rem (175)
    on left: 88, on right: 61
neg (176)
    on left: 89, on right: 62
not (177)
    on left: 90, on right: 63
deref (178)
    on left: 91, on right: 64
addr-of (179)
    on left: 92, on right: 65
addr-of-mut (180)
    on left: 93, on right: 66
assign (181)
    on left: 94 95 96 97 98 99, on right: 67
fn-call (182)
    on left: 100 101, on right: 68
exps (183)
    on left: 102 103, on right: 39 40 100 102
if (184)
    on left: 104 105, on right: 69
while (185)
    on left: 106, on right: 70
loop (186)
    on left: 107, on right: 71
box-new (187)
    on left: 108, on right: 72
arr-index (188)
    on left: 109, on right: 73
flup (189)
    on left: 110, on right: 74
match (190)
    on left: 111, on right: 75
match-arms (191)
    on left: 112 113, on right: 111 112
match-arm (192)
    on left: 114, on right: 112 113
pat-or (193)
    on left: 115 116, on right: 114 115
pat (194)
    on left: 117 118 119 120 121 122 123 124 125, on right: 17 41 42
    43 44 115 116 130 135 136 137 138 141
name-bind (195)
    on left: 126 127 128 129, on right: 117
pat-deref (196)
    on left: 130, on right: 121
pat-arr (197)
    on left: 131, on right: 123
pat-enum (198)
    on left: 132 133, on right: 124
pat-struct (199)
    on left: 134, on right: 125
array-elmts (200)
    on left: 135 136, on right: 131 135
ctor-elmts (201)
    on left: 137 138, on right: 132 137
id-pat-annots (202)
    on left: 139 140, on right: 134 139
id-pat-annot (203)
    on left: 141, on right: 139 140
type (204)
    on left: 142 143 144 145 146 147 148 149 150 151, on right: 17
    18 24 25 29 42 44 147 148 149 150 151
literal (205)
    on left: 152 153, on right: 45
prim-lit (206)
    on left: 154 155 156 157, on right: 118 152
comp-lit (207)
    on left: 158 159 160, on right: 153
lit-bool (208)
    on left: 161 162, on right: 154
lit-enum (209)
    on left: 163 164, on right: 158
enum-exps (210)
    on left: 165 166, on right: 164 165 171
lit-struct (211)
    on left: 167, on right: 159
id-exp-annots (212)
    on left: 168 169, on right: 167 168
id-exp-annot (213)
    on left: 170, on right: 168 169
lit-array (214)
    on left: 171, on right: 160


State 0

    0 $accept: . program $end

    ENUM    shift, and go to state 1
    FN      shift, and go to state 2
    STRUCT  shift, and go to state 3

    program     go to state 4
    crate       go to state 5
    items       go to state 6
    item        go to state 7
    fn-def      go to state 8
    enum-def    go to state 9
    struct-def  go to state 10


State 1

   19 enum-def: ENUM . ID LCURLY enum-ctor-defs RCURLY

    ID  shift, and go to state 11


State 2

    8 fn-def: FN . ID LPAREN RPAREN block
    9       | FN . ID LPAREN RPAREN FUNCTION_ARROW ret block
   10       | FN . ID LPAREN fn-params RPAREN block
   11       | FN . ID LPAREN fn-params RPAREN FUNCTION_ARROW ret block
   12       | FN . ID LPAREN fn-params RPAREN FUNCTION_ARROW EXCLAMATION block
   13       | FN . ID LPAREN RPAREN FUNCTION_ARROW EXCLAMATION block

    ID  shift, and go to state 12


State 3

   26 struct-def: STRUCT . ID LCURLY type-annots RCURLY

    ID  shift, and go to state 13


State 4

    0 $accept: program . $end

    $end  shift, and go to state 14


State 5

    1 program: crate .

    $default  reduce using rule 1 (program)


State 6

    2 crate: items .

    $default  reduce using rule 2 (crate)


State 7

    3 items: item . items
    4      | item .

    ENUM    shift, and go to state 1
    FN      shift, and go to state 2
    STRUCT  shift, and go to state 3

    $default  reduce using rule 4 (items)

    items       go to state 15
    item        go to state 7
    fn-def      go to state 8
    enum-def    go to state 9
    struct-def  go to state 10


State 8

    5 item: fn-def .

    $default  reduce using rule 5 (item)


State 9

    6 item: enum-def .

    $default  reduce using rule 6 (item)


State 10

    7 item: struct-def .

    $default  reduce using rule 7 (item)


State 11

   19 enum-def: ENUM ID . LCURLY enum-ctor-defs RCURLY

    LCURLY  shift, and go to state 16


State 12

    8 fn-def: FN ID . LPAREN RPAREN block
    9       | FN ID . LPAREN RPAREN FUNCTION_ARROW ret block
   10       | FN ID . LPAREN fn-params RPAREN block
   11       | FN ID . LPAREN fn-params RPAREN FUNCTION_ARROW ret block
   12       | FN ID . LPAREN fn-params RPAREN FUNCTION_ARROW EXCLAMATION block
   13       | FN ID . LPAREN RPAREN FUNCTION_ARROW EXCLAMATION block

    LPAREN  shift, and go to state 17


State 13

   26 struct-def: STRUCT ID . LCURLY type-annots RCURLY

    LCURLY  shift, and go to state 18


State 14

    0 $accept: program $end .

    $default  accept


State 15

    3 items: item items .

    $default  reduce using rule 3 (items)


State 16

   19 enum-def: ENUM ID LCURLY . enum-ctor-defs RCURLY

    ID  shift, and go to state 19

    enum-ctor-defs  go to state 20
    enum-ctor-def   go to state 21


State 17

    8 fn-def: FN ID LPAREN . RPAREN block
    9       | FN ID LPAREN . RPAREN FUNCTION_ARROW ret block
   10       | FN ID LPAREN . fn-params RPAREN block
   11       | FN ID LPAREN . fn-params RPAREN FUNCTION_ARROW ret block
   12       | FN ID LPAREN . fn-params RPAREN FUNCTION_ARROW EXCLAMATION block
   13       | FN ID LPAREN . RPAREN FUNCTION_ARROW EXCLAMATION block

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    RPAREN         shift, and go to state 25
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    fn-params       go to state 36
    fn-param        go to state 37
    pat-type-annot  go to state 38
    pat             go to state 39
    name-bind       go to state 40
    pat-deref       go to state 41
    pat-arr         go to state 42
    pat-enum        go to state 43
    pat-struct      go to state 44
    prim-lit        go to state 45
    lit-bool        go to state 46


State 18

   26 struct-def: STRUCT ID LCURLY . type-annots RCURLY

    ID  shift, and go to state 47

    type-annots  go to state 48
    type-annot   go to state 49


State 19

   22 enum-ctor-def: ID .
   23              | ID . LPAREN ctor-types RPAREN

    LPAREN  shift, and go to state 50

    $default  reduce using rule 22 (enum-ctor-def)


State 20

   19 enum-def: ENUM ID LCURLY enum-ctor-defs . RCURLY

    RCURLY  shift, and go to state 51


State 21

   20 enum-ctor-defs: enum-ctor-def . COMMA enum-ctor-defs
   21               | enum-ctor-def .

    COMMA  shift, and go to state 52

    $default  reduce using rule 21 (enum-ctor-defs)


State 22

  119 pat: NEGATIVE_SIGN .

    $default  reduce using rule 119 (pat)


State 23

  130 pat-deref: ADDRESS . pat

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat         go to state 53
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 24

  120 pat: LPAREN . RPAREN

    RPAREN  shift, and go to state 54


State 25

    8 fn-def: FN ID LPAREN RPAREN . block
    9       | FN ID LPAREN RPAREN . FUNCTION_ARROW ret block
   13       | FN ID LPAREN RPAREN . FUNCTION_ARROW EXCLAMATION block

    FUNCTION_ARROW  shift, and go to state 55
    LCURLY          shift, and go to state 56

    block  go to state 57


State 26

  129 name-bind: MUT . ID

    ID  shift, and go to state 58


State 27

  131 pat-arr: LSQUARE . array-elmts RSQUARE

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat          go to state 59
    name-bind    go to state 40
    pat-deref    go to state 41
    pat-arr      go to state 42
    pat-enum     go to state 43
    pat-struct   go to state 44
    array-elmts  go to state 60
    prim-lit     go to state 45
    lit-bool     go to state 46


State 28

  127 name-bind: REF . ID
  128          | REF . MUT ID

    MUT  shift, and go to state 61
    ID   shift, and go to state 62


State 29

  122 pat: UNDERSCORE .

    $default  reduce using rule 122 (pat)


State 30

  156 prim-lit: LITDEC .

    $default  reduce using rule 156 (prim-lit)


State 31

  126 name-bind: ID .
  132 pat-enum: ID . PATH ID LPAREN ctor-elmts RPAREN
  133         | ID . PATH ID
  134 pat-struct: ID . LCURLY id-pat-annots RCURLY

    PATH    shift, and go to state 63
    LCURLY  shift, and go to state 64

    $default  reduce using rule 126 (name-bind)


State 32

  157 prim-lit: LITSTR .

    $default  reduce using rule 157 (prim-lit)


State 33

  155 prim-lit: LITCHAR .

    $default  reduce using rule 155 (prim-lit)


State 34

  162 lit-bool: FALS .

    $default  reduce using rule 162 (lit-bool)


State 35

  161 lit-bool: TRU .

    $default  reduce using rule 161 (lit-bool)


State 36

   10 fn-def: FN ID LPAREN fn-params . RPAREN block
   11       | FN ID LPAREN fn-params . RPAREN FUNCTION_ARROW ret block
   12       | FN ID LPAREN fn-params . RPAREN FUNCTION_ARROW EXCLAMATION block

    RPAREN  shift, and go to state 65


State 37

   14 fn-params: fn-param . COMMA fn-params
   15          | fn-param .

    COMMA  shift, and go to state 66

    $default  reduce using rule 15 (fn-params)


State 38

   16 fn-param: pat-type-annot .

    $default  reduce using rule 16 (fn-param)


State 39

   17 pat-type-annot: pat . COLON type

    COLON  shift, and go to state 67


State 40

  117 pat: name-bind .

    $default  reduce using rule 117 (pat)


State 41

  121 pat: pat-deref .

    $default  reduce using rule 121 (pat)


State 42

  123 pat: pat-arr .

    $default  reduce using rule 123 (pat)


State 43

  124 pat: pat-enum .

    $default  reduce using rule 124 (pat)


State 44

  125 pat: pat-struct .

    $default  reduce using rule 125 (pat)


State 45

  118 pat: prim-lit .

    $default  reduce using rule 118 (pat)


State 46

  154 prim-lit: lit-bool .

    $default  reduce using rule 154 (prim-lit)


State 47

   29 type-annot: ID . COLON type

    COLON  shift, and go to state 68


State 48

   26 struct-def: STRUCT ID LCURLY type-annots . RCURLY

    RCURLY  shift, and go to state 69


State 49

   27 type-annots: type-annot . COMMA type-annots
   28            | type-annot .

    COMMA  shift, and go to state 70

    $default  reduce using rule 28 (type-annots)


State 50

   23 enum-ctor-def: ID LPAREN . ctor-types RPAREN

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    ctor-types  go to state 79
    type        go to state 80


State 51

   19 enum-def: ENUM ID LCURLY enum-ctor-defs RCURLY .

    $default  reduce using rule 19 (enum-def)


State 52

   20 enum-ctor-defs: enum-ctor-def COMMA . enum-ctor-defs

    ID  shift, and go to state 19

    enum-ctor-defs  go to state 81
    enum-ctor-def   go to state 21


State 53

  130 pat-deref: ADDRESS pat .

    $default  reduce using rule 130 (pat-deref)


State 54

  120 pat: LPAREN RPAREN .

    $default  reduce using rule 120 (pat)


State 55

    9 fn-def: FN ID LPAREN RPAREN FUNCTION_ARROW . ret block
   13       | FN ID LPAREN RPAREN FUNCTION_ARROW . EXCLAMATION block

    EXCLAMATION  shift, and go to state 82
    ADDRESS      shift, and go to state 71
    LPAREN       shift, and go to state 72
    LSQUARE      shift, and go to state 73
    BOX          shift, and go to state 74
    BOOL         shift, and go to state 75
    U8           shift, and go to state 76
    I32          shift, and go to state 77
    ID           shift, and go to state 78

    ret   go to state 83
    type  go to state 84


State 56

   30 block: LCURLY . stmts RCURLY
   31      | LCURLY . RCURLY

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    RCURLY         shift, and go to state 91
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LET            shift, and go to state 94
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    RETURN         shift, and go to state 97
    WHILE          shift, and go to state 98
    PRINTS         shift, and go to state 99
    PRINTI         shift, and go to state 100
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    stmts        go to state 102
    stmt         go to state 103
    let          go to state 104
    exp          go to state 105
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 57

    8 fn-def: FN ID LPAREN RPAREN block .

    $default  reduce using rule 8 (fn-def)


State 58

  129 name-bind: MUT ID .

    $default  reduce using rule 129 (name-bind)


State 59

  135 array-elmts: pat . COMMA array-elmts
  136            | pat .

    COMMA  shift, and go to state 139

    $default  reduce using rule 136 (array-elmts)


State 60

  131 pat-arr: LSQUARE array-elmts . RSQUARE

    RSQUARE  shift, and go to state 140


State 61

  128 name-bind: REF MUT . ID

    ID  shift, and go to state 141


State 62

  127 name-bind: REF ID .

    $default  reduce using rule 127 (name-bind)


State 63

  132 pat-enum: ID PATH . ID LPAREN ctor-elmts RPAREN
  133         | ID PATH . ID

    ID  shift, and go to state 142


State 64

  134 pat-struct: ID LCURLY . id-pat-annots RCURLY

    ID  shift, and go to state 143

    id-pat-annots  go to state 144
    id-pat-annot   go to state 145


State 65

   10 fn-def: FN ID LPAREN fn-params RPAREN . block
   11       | FN ID LPAREN fn-params RPAREN . FUNCTION_ARROW ret block
   12       | FN ID LPAREN fn-params RPAREN . FUNCTION_ARROW EXCLAMATION block

    FUNCTION_ARROW  shift, and go to state 146
    LCURLY          shift, and go to state 56

    block  go to state 147


State 66

   14 fn-params: fn-param COMMA . fn-params

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    fn-params       go to state 148
    fn-param        go to state 37
    pat-type-annot  go to state 38
    pat             go to state 39
    name-bind       go to state 40
    pat-deref       go to state 41
    pat-arr         go to state 42
    pat-enum        go to state 43
    pat-struct      go to state 44
    prim-lit        go to state 45
    lit-bool        go to state 46


State 67

   17 pat-type-annot: pat COLON . type

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 149


State 68

   29 type-annot: ID COLON . type

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 150


State 69

   26 struct-def: STRUCT ID LCURLY type-annots RCURLY .

    $default  reduce using rule 26 (struct-def)


State 70

   27 type-annots: type-annot COMMA . type-annots

    ID  shift, and go to state 47

    type-annots  go to state 151
    type-annot   go to state 49


State 71

  149 type: ADDRESS . type
  150     | ADDRESS . MUT type

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    MUT      shift, and go to state 152
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 153


State 72

  146 type: LPAREN . RPAREN

    RPAREN  shift, and go to state 154


State 73

  147 type: LSQUARE . type RSQUARE
  148     | LSQUARE . type SEMICOLON LITDEC RSQUARE

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 155


State 74

  151 type: BOX . LT type GT

    LT  shift, and go to state 156


State 75

  143 type: BOOL .

    $default  reduce using rule 143 (type)


State 76

  144 type: U8 .

    $default  reduce using rule 144 (type)


State 77

  145 type: I32 .

    $default  reduce using rule 145 (type)


State 78

  142 type: ID .

    $default  reduce using rule 142 (type)


State 79

   23 enum-ctor-def: ID LPAREN ctor-types . RPAREN

    RPAREN  shift, and go to state 157


State 80

   24 ctor-types: type . COMMA ctor-types
   25           | type .

    COMMA  shift, and go to state 158

    $default  reduce using rule 25 (ctor-types)


State 81

   20 enum-ctor-defs: enum-ctor-def COMMA enum-ctor-defs .

    $default  reduce using rule 20 (enum-ctor-defs)


State 82

   13 fn-def: FN ID LPAREN RPAREN FUNCTION_ARROW EXCLAMATION . block

    LCURLY  shift, and go to state 56

    block  go to state 159


State 83

    9 fn-def: FN ID LPAREN RPAREN FUNCTION_ARROW ret . block

    LCURLY  shift, and go to state 56

    block  go to state 160


State 84

   18 ret: type .

    $default  reduce using rule 18 (ret)


State 85

   89 neg: NEGATIVE_SIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 161
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 86

   91 deref: ASTERISK . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 162
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 87

   90 not: EXCLAMATION . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 163
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 88

   92 addr-of: ADDRESS . exp
   93 addr-of-mut: ADDRESS . MUT exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    MUT            shift, and go to state 164
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 165
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 89

   46 exp: LPAREN . exp RPAREN
   48    | LPAREN . RPAREN

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    RPAREN         shift, and go to state 166
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 167
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 90

  171 lit-array: LSQUARE . enum-exps RSQUARE

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 168
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    enum-exps    go to state 169
    lit-struct   go to state 137
    lit-array    go to state 138


State 91

   31 block: LCURLY RCURLY .

    $default  reduce using rule 31 (block)


State 92

  108 box-new: BOX . PATH NEW LPAREN exp RPAREN

    PATH  shift, and go to state 170


State 93

  104 if: IF . LPAREN exp RPAREN block ELSE block
  105   | IF . LPAREN exp RPAREN block

    LPAREN  shift, and go to state 171


State 94

   41 let: LET . pat
   42    | LET . pat COLON type ASSIGNMENT exp
   43    | LET . pat ASSIGNMENT exp
   44    | LET . pat COLON type

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat         go to state 172
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 95

  107 loop: LOOP . block

    LCURLY  shift, and go to state 56

    block  go to state 173


State 96

  111 match: MATCH . LPAREN exp RPAREN LCURLY match-arms RCURLY

    LPAREN  shift, and go to state 174


State 97

   36 stmt: RETURN . exp SEMICOLON
   37     | RETURN . SEMICOLON

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    SEMICOLON      shift, and go to state 175
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 176
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 98

  106 while: WHILE . LPAREN exp RPAREN block

    LPAREN  shift, and go to state 177


State 99

   40 stmt: PRINTS . LPAREN exps RPAREN SEMICOLON

    LPAREN  shift, and go to state 178


State 100

   39 stmt: PRINTI . LPAREN exps RPAREN SEMICOLON

    LPAREN  shift, and go to state 179


State 101

   47 exp: ID .
  100 fn-call: ID . LPAREN exps RPAREN
  101        | ID . LPAREN RPAREN
  163 lit-enum: ID . PATH ID
  164         | ID . PATH ID LPAREN enum-exps RPAREN
  167 lit-struct: ID . LCURLY id-exp-annots RCURLY

    LPAREN  shift, and go to state 180
    PATH    shift, and go to state 181
    LCURLY  shift, and go to state 182

    $default  reduce using rule 47 (exp)


State 102

   30 block: LCURLY stmts . RCURLY

    RCURLY  shift, and go to state 183


State 103

   32 stmts: stmt . stmts
   33      | stmt .

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LET            shift, and go to state 94
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    RETURN         shift, and go to state 97
    WHILE          shift, and go to state 98
    PRINTS         shift, and go to state 99
    PRINTI         shift, and go to state 100
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    $default  reduce using rule 33 (stmts)

    stmts        go to state 184
    stmt         go to state 103
    let          go to state 104
    exp          go to state 105
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 104

   38 stmt: let . SEMICOLON

    SEMICOLON  shift, and go to state 185


State 105

   34 stmts: exp .
   35 stmt: exp . SEMICOLON
   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206
    SEMICOLON      shift, and go to state 207

    $default  reduce using rule 34 (stmts)


State 106

   49 exp: or .

    $default  reduce using rule 49 (exp)


State 107

   50 exp: and .

    $default  reduce using rule 50 (exp)


State 108

   51 exp: eq .

    $default  reduce using rule 51 (exp)


State 109

   52 exp: neq .

    $default  reduce using rule 52 (exp)


State 110

   53 exp: lt .

    $default  reduce using rule 53 (exp)


State 111

   54 exp: gt .

    $default  reduce using rule 54 (exp)


State 112

   56 exp: leq .

    $default  reduce using rule 56 (exp)


State 113

   55 exp: geq .

    $default  reduce using rule 55 (exp)


State 114

   57 exp: add .

    $default  reduce using rule 57 (exp)


State 115

   58 exp: sub .

    $default  reduce using rule 58 (exp)


State 116

   59 exp: mul .

    $default  reduce using rule 59 (exp)


State 117

   60 exp: div .

    $default  reduce using rule 60 (exp)


State 118

   61 exp: rem .

    $default  reduce using rule 61 (exp)


State 119

   62 exp: neg .

    $default  reduce using rule 62 (exp)


State 120

   63 exp: not .

    $default  reduce using rule 63 (exp)


State 121

   64 exp: deref .

    $default  reduce using rule 64 (exp)


State 122

   65 exp: addr-of .

    $default  reduce using rule 65 (exp)


State 123

   66 exp: addr-of-mut .

    $default  reduce using rule 66 (exp)


State 124

   67 exp: assign .

    $default  reduce using rule 67 (exp)


State 125

   68 exp: fn-call .

    $default  reduce using rule 68 (exp)


State 126

   69 exp: if .

    $default  reduce using rule 69 (exp)


State 127

   70 exp: while .

    $default  reduce using rule 70 (exp)


State 128

   71 exp: loop .

    $default  reduce using rule 71 (exp)


State 129

   72 exp: box-new .

    $default  reduce using rule 72 (exp)


State 130

   73 exp: arr-index .

    $default  reduce using rule 73 (exp)


State 131

   74 exp: flup .

    $default  reduce using rule 74 (exp)


State 132

   75 exp: match .

    $default  reduce using rule 75 (exp)


State 133

   45 exp: literal .

    $default  reduce using rule 45 (exp)


State 134

  152 literal: prim-lit .

    $default  reduce using rule 152 (literal)


State 135

  153 literal: comp-lit .

    $default  reduce using rule 153 (literal)


State 136

  158 comp-lit: lit-enum .

    $default  reduce using rule 158 (comp-lit)


State 137

  159 comp-lit: lit-struct .

    $default  reduce using rule 159 (comp-lit)


State 138

  160 comp-lit: lit-array .

    $default  reduce using rule 160 (comp-lit)


State 139

  135 array-elmts: pat COMMA . array-elmts

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat          go to state 59
    name-bind    go to state 40
    pat-deref    go to state 41
    pat-arr      go to state 42
    pat-enum     go to state 43
    pat-struct   go to state 44
    array-elmts  go to state 208
    prim-lit     go to state 45
    lit-bool     go to state 46


State 140

  131 pat-arr: LSQUARE array-elmts RSQUARE .

    $default  reduce using rule 131 (pat-arr)


State 141

  128 name-bind: REF MUT ID .

    $default  reduce using rule 128 (name-bind)


State 142

  132 pat-enum: ID PATH ID . LPAREN ctor-elmts RPAREN
  133         | ID PATH ID .

    LPAREN  shift, and go to state 209

    $default  reduce using rule 133 (pat-enum)


State 143

  141 id-pat-annot: ID . COLON pat

    COLON  shift, and go to state 210


State 144

  134 pat-struct: ID LCURLY id-pat-annots . RCURLY

    RCURLY  shift, and go to state 211


State 145

  139 id-pat-annots: id-pat-annot . COMMA id-pat-annots
  140              | id-pat-annot .

    COMMA  shift, and go to state 212

    $default  reduce using rule 140 (id-pat-annots)


State 146

   11 fn-def: FN ID LPAREN fn-params RPAREN FUNCTION_ARROW . ret block
   12       | FN ID LPAREN fn-params RPAREN FUNCTION_ARROW . EXCLAMATION block

    EXCLAMATION  shift, and go to state 213
    ADDRESS      shift, and go to state 71
    LPAREN       shift, and go to state 72
    LSQUARE      shift, and go to state 73
    BOX          shift, and go to state 74
    BOOL         shift, and go to state 75
    U8           shift, and go to state 76
    I32          shift, and go to state 77
    ID           shift, and go to state 78

    ret   go to state 214
    type  go to state 84


State 147

   10 fn-def: FN ID LPAREN fn-params RPAREN block .

    $default  reduce using rule 10 (fn-def)


State 148

   14 fn-params: fn-param COMMA fn-params .

    $default  reduce using rule 14 (fn-params)


State 149

   17 pat-type-annot: pat COLON type .

    $default  reduce using rule 17 (pat-type-annot)


State 150

   29 type-annot: ID COLON type .

    $default  reduce using rule 29 (type-annot)


State 151

   27 type-annots: type-annot COMMA type-annots .

    $default  reduce using rule 27 (type-annots)


State 152

  150 type: ADDRESS MUT . type

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 215


State 153

  149 type: ADDRESS type .

    $default  reduce using rule 149 (type)


State 154

  146 type: LPAREN RPAREN .

    $default  reduce using rule 146 (type)


State 155

  147 type: LSQUARE type . RSQUARE
  148     | LSQUARE type . SEMICOLON LITDEC RSQUARE

    RSQUARE    shift, and go to state 216
    SEMICOLON  shift, and go to state 217


State 156

  151 type: BOX LT . type GT

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 218


State 157

   23 enum-ctor-def: ID LPAREN ctor-types RPAREN .

    $default  reduce using rule 23 (enum-ctor-def)


State 158

   24 ctor-types: type COMMA . ctor-types

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    ctor-types  go to state 219
    type        go to state 80


State 159

   13 fn-def: FN ID LPAREN RPAREN FUNCTION_ARROW EXCLAMATION block .

    $default  reduce using rule 13 (fn-def)


State 160

    9 fn-def: FN ID LPAREN RPAREN FUNCTION_ARROW ret block .

    $default  reduce using rule 9 (fn-def)


State 161

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   89 neg: NEGATIVE_SIGN exp .
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    LSQUARE  shift, and go to state 205
    DOT      shift, and go to state 206

    $default  reduce using rule 89 (neg)


State 162

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   91 deref: ASTERISK exp .
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    LSQUARE  shift, and go to state 205
    DOT      shift, and go to state 206

    $default  reduce using rule 91 (deref)


State 163

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   90 not: EXCLAMATION exp .
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    LSQUARE  shift, and go to state 205
    DOT      shift, and go to state 206

    $default  reduce using rule 90 (not)


State 164

   93 addr-of-mut: ADDRESS MUT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 220
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 165

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   92 addr-of: ADDRESS exp .
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    LSQUARE  shift, and go to state 205
    DOT      shift, and go to state 206

    $default  reduce using rule 92 (addr-of)


State 166

   48 exp: LPAREN RPAREN .

    $default  reduce using rule 48 (exp)


State 167

   46 exp: LPAREN exp . RPAREN
   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    RPAREN         shift, and go to state 221
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206


State 168

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp
  165 enum-exps: exp . COMMA enum-exps
  166          | exp .

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206
    COMMA          shift, and go to state 222

    $default  reduce using rule 166 (enum-exps)


State 169

  171 lit-array: LSQUARE enum-exps . RSQUARE

    RSQUARE  shift, and go to state 223


State 170

  108 box-new: BOX PATH . NEW LPAREN exp RPAREN

    NEW  shift, and go to state 224


State 171

  104 if: IF LPAREN . exp RPAREN block ELSE block
  105   | IF LPAREN . exp RPAREN block

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 225
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 172

   41 let: LET pat .
   42    | LET pat . COLON type ASSIGNMENT exp
   43    | LET pat . ASSIGNMENT exp
   44    | LET pat . COLON type

    ASSIGNMENT  shift, and go to state 226
    COLON       shift, and go to state 227

    $default  reduce using rule 41 (let)


State 173

  107 loop: LOOP block .

    $default  reduce using rule 107 (loop)


State 174

  111 match: MATCH LPAREN . exp RPAREN LCURLY match-arms RCURLY

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 228
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 175

   37 stmt: RETURN SEMICOLON .

    $default  reduce using rule 37 (stmt)


State 176

   36 stmt: RETURN exp . SEMICOLON
   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206
    SEMICOLON      shift, and go to state 229


State 177

  106 while: WHILE LPAREN . exp RPAREN block

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 230
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 178

   40 stmt: PRINTS LPAREN . exps RPAREN SEMICOLON

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 231
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    exps         go to state 232
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 179

   39 stmt: PRINTI LPAREN . exps RPAREN SEMICOLON

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 231
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    exps         go to state 233
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 180

  100 fn-call: ID LPAREN . exps RPAREN
  101        | ID LPAREN . RPAREN

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    RPAREN         shift, and go to state 234
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 231
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    exps         go to state 235
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 181

  163 lit-enum: ID PATH . ID
  164         | ID PATH . ID LPAREN enum-exps RPAREN

    ID  shift, and go to state 236


State 182

  167 lit-struct: ID LCURLY . id-exp-annots RCURLY

    ID  shift, and go to state 237

    id-exp-annots  go to state 238
    id-exp-annot   go to state 239


State 183

   30 block: LCURLY stmts RCURLY .

    $default  reduce using rule 30 (block)


State 184

   32 stmts: stmt stmts .

    $default  reduce using rule 32 (stmts)


State 185

   38 stmt: let SEMICOLON .

    $default  reduce using rule 38 (stmt)


State 186

   76 or: exp BOOL_OR . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 240
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 187

   77 and: exp BOOL_AND . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 241
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 188

   84 add: exp ADD . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 242
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 189

   85 sub: exp NEGATIVE_SIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 243
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 190

   86 mul: exp ASTERISK . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 244
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 191

   87 div: exp DIV . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 245
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 192

   78 eq: exp EQ . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 246
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 193

   79 neq: exp NE . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 247
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 194

   88 rem: exp REM . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 248
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 195

   80 lt: exp LT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 249
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 196

   81 gt: exp GT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 250
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 197

   82 leq: exp LE . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 251
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 198

   83 geq: exp GE . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 252
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 199

   99 assign: exp ASSIGNMENT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 253
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 200

   94 assign: exp PLUS_ASSIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 254
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 201

   95 assign: exp SUB_ASSIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 255
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 202

   96 assign: exp MUL_ASSIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 256
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 203

   97 assign: exp DIV_ASSIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 257
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 204

   98 assign: exp REM_ASSIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 258
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 205

  109 arr-index: exp LSQUARE . exp RSQUARE

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 259
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 206

  110 flup: exp DOT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 260
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 207

   35 stmt: exp SEMICOLON .

    $default  reduce using rule 35 (stmt)


State 208

  135 array-elmts: pat COMMA array-elmts .

    $default  reduce using rule 135 (array-elmts)


State 209

  132 pat-enum: ID PATH ID LPAREN . ctor-elmts RPAREN

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat         go to state 261
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    ctor-elmts  go to state 262
    prim-lit    go to state 45
    lit-bool    go to state 46


State 210

  141 id-pat-annot: ID COLON . pat

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat         go to state 263
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 211

  134 pat-struct: ID LCURLY id-pat-annots RCURLY .

    $default  reduce using rule 134 (pat-struct)


State 212

  139 id-pat-annots: id-pat-annot COMMA . id-pat-annots

    ID  shift, and go to state 143

    id-pat-annots  go to state 264
    id-pat-annot   go to state 145


State 213

   12 fn-def: FN ID LPAREN fn-params RPAREN FUNCTION_ARROW EXCLAMATION . block

    LCURLY  shift, and go to state 56

    block  go to state 265


State 214

   11 fn-def: FN ID LPAREN fn-params RPAREN FUNCTION_ARROW ret . block

    LCURLY  shift, and go to state 56

    block  go to state 266


State 215

  150 type: ADDRESS MUT type .

    $default  reduce using rule 150 (type)


State 216

  147 type: LSQUARE type RSQUARE .

    $default  reduce using rule 147 (type)


State 217

  148 type: LSQUARE type SEMICOLON . LITDEC RSQUARE

    LITDEC  shift, and go to state 267


State 218

  151 type: BOX LT type . GT

    GT  shift, and go to state 268


State 219

   24 ctor-types: type COMMA ctor-types .

    $default  reduce using rule 24 (ctor-types)


State 220

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   93 addr-of-mut: ADDRESS MUT exp .
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    LSQUARE  shift, and go to state 205
    DOT      shift, and go to state 206

    $default  reduce using rule 93 (addr-of-mut)


State 221

   46 exp: LPAREN exp RPAREN .

    $default  reduce using rule 46 (exp)


State 222

  165 enum-exps: exp COMMA . enum-exps

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 168
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    enum-exps    go to state 269
    lit-struct   go to state 137
    lit-array    go to state 138


State 223

  171 lit-array: LSQUARE enum-exps RSQUARE .

    $default  reduce using rule 171 (lit-array)


State 224

  108 box-new: BOX PATH NEW . LPAREN exp RPAREN

    LPAREN  shift, and go to state 270


State 225

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  104 if: IF LPAREN exp . RPAREN block ELSE block
  105   | IF LPAREN exp . RPAREN block
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    RPAREN         shift, and go to state 271
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206


State 226

   43 let: LET pat ASSIGNMENT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 272
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 227

   42 let: LET pat COLON . type ASSIGNMENT exp
   44    | LET pat COLON . type

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 273


State 228

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp
  111 match: MATCH LPAREN exp . RPAREN LCURLY match-arms RCURLY

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    RPAREN         shift, and go to state 274
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206


State 229

   36 stmt: RETURN exp SEMICOLON .

    $default  reduce using rule 36 (stmt)


State 230

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  106 while: WHILE LPAREN exp . RPAREN block
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    RPAREN         shift, and go to state 275
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206


State 231

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  102 exps: exp . COMMA exps
  103     | exp .
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206
    COMMA          shift, and go to state 276

    $default  reduce using rule 103 (exps)


State 232

   40 stmt: PRINTS LPAREN exps . RPAREN SEMICOLON

    RPAREN  shift, and go to state 277


State 233

   39 stmt: PRINTI LPAREN exps . RPAREN SEMICOLON

    RPAREN  shift, and go to state 278


State 234

  101 fn-call: ID LPAREN RPAREN .

    $default  reduce using rule 101 (fn-call)


State 235

  100 fn-call: ID LPAREN exps . RPAREN

    RPAREN  shift, and go to state 279


State 236

  163 lit-enum: ID PATH ID .
  164         | ID PATH ID . LPAREN enum-exps RPAREN

    LPAREN  shift, and go to state 280

    $default  reduce using rule 163 (lit-enum)


State 237

  170 id-exp-annot: ID . COLON exp

    COLON  shift, and go to state 281


State 238

  167 lit-struct: ID LCURLY id-exp-annots . RCURLY

    RCURLY  shift, and go to state 282


State 239

  168 id-exp-annots: id-exp-annot . COMMA id-exp-annots
  169              | id-exp-annot .

    COMMA  shift, and go to state 283

    $default  reduce using rule 169 (id-exp-annots)


State 240

   76 or: exp . BOOL_OR exp
   76   | exp BOOL_OR exp .
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 76 (or)


State 241

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   77    | exp BOOL_AND exp .
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 77 (and)


State 242

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   84    | exp ADD exp .
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    ASTERISK  shift, and go to state 190
    DIV       shift, and go to state 191
    REM       shift, and go to state 194
    LSQUARE   shift, and go to state 205
    DOT       shift, and go to state 206

    $default  reduce using rule 84 (add)


State 243

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   85    | exp NEGATIVE_SIGN exp .
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    ASTERISK  shift, and go to state 190
    DIV       shift, and go to state 191
    REM       shift, and go to state 194
    LSQUARE   shift, and go to state 205
    DOT       shift, and go to state 206

    $default  reduce using rule 85 (sub)


State 244

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   86    | exp ASTERISK exp .
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    LSQUARE  shift, and go to state 205
    DOT      shift, and go to state 206

    $default  reduce using rule 86 (mul)


State 245

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   87    | exp DIV exp .
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    LSQUARE  shift, and go to state 205
    DOT      shift, and go to state 206

    $default  reduce using rule 87 (div)


State 246

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   78   | exp EQ exp .
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    REM            shift, and go to state 194
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 78 (eq)


State 247

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   79    | exp NE exp .
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    REM            shift, and go to state 194
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 79 (neq)


State 248

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   88    | exp REM exp .
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    LSQUARE  shift, and go to state 205
    DOT      shift, and go to state 206

    $default  reduce using rule 88 (rem)


State 249

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   80   | exp LT exp .
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    REM            shift, and go to state 194
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 80 (lt)


State 250

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   81   | exp GT exp .
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    REM            shift, and go to state 194
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 81 (gt)


State 251

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   82    | exp LE exp .
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    REM            shift, and go to state 194
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 82 (leq)


State 252

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   83    | exp GE exp .
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    REM            shift, and go to state 194
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 83 (geq)


State 253

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
   99       | exp ASSIGNMENT exp .
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 99 (assign)


State 254

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   94       | exp PLUS_ASSIGN exp .
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 94 (assign)


State 255

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   95       | exp SUB_ASSIGN exp .
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 95 (assign)


State 256

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   96       | exp MUL_ASSIGN exp .
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 96 (assign)


State 257

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   97       | exp DIV_ASSIGN exp .
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 97 (assign)


State 258

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   98       | exp REM_ASSIGN exp .
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 98 (assign)


State 259

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  109          | exp LSQUARE exp . RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    RSQUARE        shift, and go to state 284
    DOT            shift, and go to state 206


State 260

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp
  110     | exp DOT exp .

    $default  reduce using rule 110 (flup)


State 261

  137 ctor-elmts: pat . COMMA ctor-elmts
  138           | pat .

    COMMA  shift, and go to state 285

    $default  reduce using rule 138 (ctor-elmts)


State 262

  132 pat-enum: ID PATH ID LPAREN ctor-elmts . RPAREN

    RPAREN  shift, and go to state 286


State 263

  141 id-pat-annot: ID COLON pat .

    $default  reduce using rule 141 (id-pat-annot)


State 264

  139 id-pat-annots: id-pat-annot COMMA id-pat-annots .

    $default  reduce using rule 139 (id-pat-annots)


State 265

   12 fn-def: FN ID LPAREN fn-params RPAREN FUNCTION_ARROW EXCLAMATION block .

    $default  reduce using rule 12 (fn-def)


State 266

   11 fn-def: FN ID LPAREN fn-params RPAREN FUNCTION_ARROW ret block .

    $default  reduce using rule 11 (fn-def)


State 267

  148 type: LSQUARE type SEMICOLON LITDEC . RSQUARE

    RSQUARE  shift, and go to state 287


State 268

  151 type: BOX LT type GT .

    $default  reduce using rule 151 (type)


State 269

  165 enum-exps: exp COMMA enum-exps .

    $default  reduce using rule 165 (enum-exps)


State 270

  108 box-new: BOX PATH NEW LPAREN . exp RPAREN

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 288
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 271

  104 if: IF LPAREN exp RPAREN . block ELSE block
  105   | IF LPAREN exp RPAREN . block

    LCURLY  shift, and go to state 56

    block  go to state 289


State 272

   43 let: LET pat ASSIGNMENT exp .
   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 43 (let)


State 273

   42 let: LET pat COLON type . ASSIGNMENT exp
   44    | LET pat COLON type .

    ASSIGNMENT  shift, and go to state 290

    $default  reduce using rule 44 (let)


State 274

  111 match: MATCH LPAREN exp RPAREN . LCURLY match-arms RCURLY

    LCURLY  shift, and go to state 291


State 275

  106 while: WHILE LPAREN exp RPAREN . block

    LCURLY  shift, and go to state 56

    block  go to state 292


State 276

  102 exps: exp COMMA . exps

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 231
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    exps         go to state 293
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 277

   40 stmt: PRINTS LPAREN exps RPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 294


State 278

   39 stmt: PRINTI LPAREN exps RPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 295


State 279

  100 fn-call: ID LPAREN exps RPAREN .

    $default  reduce using rule 100 (fn-call)


State 280

  164 lit-enum: ID PATH ID LPAREN . enum-exps RPAREN

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 168
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    enum-exps    go to state 296
    lit-struct   go to state 137
    lit-array    go to state 138


State 281

  170 id-exp-annot: ID COLON . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 297
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 282

  167 lit-struct: ID LCURLY id-exp-annots RCURLY .

    $default  reduce using rule 167 (lit-struct)


State 283

  168 id-exp-annots: id-exp-annot COMMA . id-exp-annots

    ID  shift, and go to state 237

    id-exp-annots  go to state 298
    id-exp-annot   go to state 239


State 284

  109 arr-index: exp LSQUARE exp RSQUARE .

    $default  reduce using rule 109 (arr-index)


State 285

  137 ctor-elmts: pat COMMA . ctor-elmts

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat         go to state 261
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    ctor-elmts  go to state 299
    prim-lit    go to state 45
    lit-bool    go to state 46


State 286

  132 pat-enum: ID PATH ID LPAREN ctor-elmts RPAREN .

    $default  reduce using rule 132 (pat-enum)


State 287

  148 type: LSQUARE type SEMICOLON LITDEC RSQUARE .

    $default  reduce using rule 148 (type)


State 288

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  108 box-new: BOX PATH NEW LPAREN exp . RPAREN
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    RPAREN         shift, and go to state 300
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206


State 289

  104 if: IF LPAREN exp RPAREN block . ELSE block
  105   | IF LPAREN exp RPAREN block .

    ELSE  shift, and go to state 301

    $default  reduce using rule 105 (if)


State 290

   42 let: LET pat COLON type ASSIGNMENT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 101
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 302
    or           go to state 106
    and          go to state 107
    eq           go to state 108
    neq          go to state 109
    lt           go to state 110
    gt           go to state 111
    leq          go to state 112
    geq          go to state 113
    add          go to state 114
    sub          go to state 115
    mul          go to state 116
    div          go to state 117
    rem          go to state 118
    neg          go to state 119
    not          go to state 120
    deref        go to state 121
    addr-of      go to state 122
    addr-of-mut  go to state 123
    assign       go to state 124
    fn-call      go to state 125
    if           go to state 126
    while        go to state 127
    loop         go to state 128
    box-new      go to state 129
    arr-index    go to state 130
    flup         go to state 131
    match        go to state 132
    literal      go to state 133
    prim-lit     go to state 134
    comp-lit     go to state 135
    lit-bool     go to state 46
    lit-enum     go to state 136
    lit-struct   go to state 137
    lit-array    go to state 138


State 291

  111 match: MATCH LPAREN exp RPAREN LCURLY . match-arms RCURLY

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    match-arms  go to state 303
    match-arm   go to state 304
    pat-or      go to state 305
    pat         go to state 306
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 292

  106 while: WHILE LPAREN exp RPAREN block .

    $default  reduce using rule 106 (while)


State 293

  102 exps: exp COMMA exps .

    $default  reduce using rule 102 (exps)


State 294

   40 stmt: PRINTS LPAREN exps RPAREN SEMICOLON .

    $default  reduce using rule 40 (stmt)


State 295

   39 stmt: PRINTI LPAREN exps RPAREN SEMICOLON .

    $default  reduce using rule 39 (stmt)


State 296

  164 lit-enum: ID PATH ID LPAREN enum-exps . RPAREN

    RPAREN  shift, and go to state 307


State 297

   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp
  170 id-exp-annot: ID COLON exp .

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 170 (id-exp-annot)


State 298

  168 id-exp-annots: id-exp-annot COMMA id-exp-annots .

    $default  reduce using rule 168 (id-exp-annots)


State 299

  137 ctor-elmts: pat COMMA ctor-elmts .

    $default  reduce using rule 137 (ctor-elmts)


State 300

  108 box-new: BOX PATH NEW LPAREN exp RPAREN .

    $default  reduce using rule 108 (box-new)


State 301

  104 if: IF LPAREN exp RPAREN block ELSE . block

    LCURLY  shift, and go to state 56

    block  go to state 308


State 302

   42 let: LET pat COLON type ASSIGNMENT exp .
   76 or: exp . BOOL_OR exp
   77 and: exp . BOOL_AND exp
   78 eq: exp . EQ exp
   79 neq: exp . NE exp
   80 lt: exp . LT exp
   81 gt: exp . GT exp
   82 leq: exp . LE exp
   83 geq: exp . GE exp
   84 add: exp . ADD exp
   85 sub: exp . NEGATIVE_SIGN exp
   86 mul: exp . ASTERISK exp
   87 div: exp . DIV exp
   88 rem: exp . REM exp
   94 assign: exp . PLUS_ASSIGN exp
   95       | exp . SUB_ASSIGN exp
   96       | exp . MUL_ASSIGN exp
   97       | exp . DIV_ASSIGN exp
   98       | exp . REM_ASSIGN exp
   99       | exp . ASSIGNMENT exp
  109 arr-index: exp . LSQUARE exp RSQUARE
  110 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 186
    BOOL_AND       shift, and go to state 187
    ADD            shift, and go to state 188
    NEGATIVE_SIGN  shift, and go to state 189
    ASTERISK       shift, and go to state 190
    DIV            shift, and go to state 191
    EQ             shift, and go to state 192
    NE             shift, and go to state 193
    REM            shift, and go to state 194
    LT             shift, and go to state 195
    GT             shift, and go to state 196
    LE             shift, and go to state 197
    GE             shift, and go to state 198
    ASSIGNMENT     shift, and go to state 199
    PLUS_ASSIGN    shift, and go to state 200
    SUB_ASSIGN     shift, and go to state 201
    MUL_ASSIGN     shift, and go to state 202
    DIV_ASSIGN     shift, and go to state 203
    REM_ASSIGN     shift, and go to state 204
    LSQUARE        shift, and go to state 205
    DOT            shift, and go to state 206

    $default  reduce using rule 42 (let)


State 303

  111 match: MATCH LPAREN exp RPAREN LCURLY match-arms . RCURLY

    RCURLY  shift, and go to state 309


State 304

  112 match-arms: match-arm . COMMA match-arms
  113           | match-arm .

    COMMA  shift, and go to state 310

    $default  reduce using rule 113 (match-arms)


State 305

  114 match-arm: pat-or . MATCH_ARROW block

    MATCH_ARROW  shift, and go to state 311


State 306

  115 pat-or: pat . BITOR pat-or
  116       | pat .

    BITOR  shift, and go to state 312

    $default  reduce using rule 116 (pat-or)


State 307

  164 lit-enum: ID PATH ID LPAREN enum-exps RPAREN .

    $default  reduce using rule 164 (lit-enum)


State 308

  104 if: IF LPAREN exp RPAREN block ELSE block .

    $default  reduce using rule 104 (if)


State 309

  111 match: MATCH LPAREN exp RPAREN LCURLY match-arms RCURLY .

    $default  reduce using rule 111 (match)


State 310

  112 match-arms: match-arm COMMA . match-arms

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    match-arms  go to state 313
    match-arm   go to state 304
    pat-or      go to state 305
    pat         go to state 306
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 311

  114 match-arm: pat-or MATCH_ARROW . block

    LCURLY  shift, and go to state 56

    block  go to state 314


State 312

  115 pat-or: pat BITOR . pat-or

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat-or      go to state 315
    pat         go to state 306
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 313

  112 match-arms: match-arm COMMA match-arms .

    $default  reduce using rule 112 (match-arms)


State 314

  114 match-arm: pat-or MATCH_ARROW block .

    $default  reduce using rule 114 (match-arm)


State 315

  115 pat-or: pat BITOR pat-or .

    $default  reduce using rule 115 (pat-or)
