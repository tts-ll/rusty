Terminals unused in grammar

   AS
   SHL
   SHR
   BITAND
   BITXOR
   RANGE
   BITAND_ASSIGN
   BITXOR_ASSIGN
   BITOR_ASSIGN
   SHL_ASSIGN
   SHR_ASSIGN
   DIRECTIVE
   DIRECTIVE_FEATURE
   APOST
   DOLLAR
   TRIPLE_DOT
   ABSTRACT
   ALIGNOF
   BE
   BREAK
   CASE
   CONST
   CONTINUE
   CRATE
   DO
   EXTERN
   FINAL
   FOR
   IMPL
   IN
   MACRO
   MACRO_RULES
   MOD
   MOVE
   OFFSETOF
   OVERRIDE
   PRIV
   PUB
   PURE
   SIZEOF
   STATIC
   SELF
   SUPER
   TRAIT
   TYPE
   TYPEOF
   UNKNOWN
   UNSAFE
   UNSIZED
   USE
   VIRTUAL
   WHERE
   YIELD
   UNIT
   U16
   U32
   U64
   I8
   I16
   I64
   F32
   F64
   USIZE
   ISIZE
   CHAR
   STR
   FLSUFFi
   EXCOMMA_L
   EXCOMMA_H
   NOT
   FNCALLEXP
   FLUPSHIFT
   NULLLIST
   END


Grammar

    0 $accept: program $end

    1 program: crate

    2 crate: items

    3 items: item items
    4      | item

    5 item: fn-def
    6     | enum-def
    7     | struct-def

    8 fn-def: FN ID LPAREN RPAREN block
    9       | FN ID LPAREN RPAREN FUNCTION_ARROW ret block
   10       | FN ID LPAREN fn-params RPAREN block
   11       | FN ID LPAREN fn-params RPAREN FUNCTION_ARROW ret block
   12       | FN ID LPAREN fn-params RPAREN FUNCTION_ARROW EXCLAMATION block
   13       | FN ID LPAREN RPAREN FUNCTION_ARROW EXCLAMATION block

   14 fn-params: fn-param COMMA fn-params
   15          | fn-param

   16 fn-param: pat-type-annot

   17 pat-type-annot: pat COLON type

   18 ret: type

   19 enum-def: ENUM ID LCURLY enum-ctor-defs RCURLY

   20 enum-ctor-defs: enum-ctor-def COMMA enum-ctor-defs
   21               | enum-ctor-def

   22 enum-ctor-def: ID
   23              | ID LPAREN ctor-types RPAREN

   24 ctor-types: type COMMA ctor-types
   25           | type

   26 struct-def: STRUCT ID LCURLY type-annots RCURLY

   27 type-annots: type-annot COMMA type-annots
   28            | type-annot

   29 type-annot: ID COLON type

   30 block: LCURLY stmts RCURLY
   31      | LCURLY RCURLY

   32 stmts: stmt stmts
   33      | stmt
   34      | exp

   35 stmt: exp SEMICOLON
   36     | RETURN exp SEMICOLON
   37     | RETURN SEMICOLON
   38     | let SEMICOLON

   39 let: LET pat
   40    | LET pat COLON type ASSIGNMENT exp
   41    | LET pat ASSIGNMENT exp
   42    | LET pat COLON type

   43 exp: literal
   44    | LPAREN exp RPAREN
   45    | ID
   46    | LPAREN RPAREN
   47    | or
   48    | and
   49    | eq
   50    | neq
   51    | lt
   52    | gt
   53    | geq
   54    | leq
   55    | add
   56    | sub
   57    | mul
   58    | div
   59    | rem
   60    | neg
   61    | not
   62    | deref
   63    | addr-of
   64    | addr-of-mut
   65    | assign
   66    | fn-call
   67    | if
   68    | while
   69    | loop
   70    | box-new
   71    | arr-index
   72    | flup
   73    | match

   74 or: exp BOOL_OR exp

   75 and: exp BOOL_AND exp

   76 eq: exp EQ exp

   77 neq: exp NE exp

   78 lt: exp LT exp

   79 gt: exp GT exp

   80 leq: exp LE exp

   81 geq: exp GE exp

   82 add: exp ADD exp

   83 sub: exp NEGATIVE_SIGN exp

   84 mul: exp ASTERISK exp

   85 div: exp DIV exp

   86 rem: exp REM exp

   87 neg: NEGATIVE_SIGN exp

   88 not: EXCLAMATION exp

   89 deref: ASTERISK exp

   90 addr-of: ADDRESS exp

   91 addr-of-mut: ADDRESS MUT exp

   92 assign: exp PLUS_ASSIGN exp
   93       | exp SUB_ASSIGN exp
   94       | exp MUL_ASSIGN exp
   95       | exp DIV_ASSIGN exp
   96       | exp REM_ASSIGN exp
   97       | exp ASSIGNMENT exp

   98 fn-call: ID LPAREN exps RPAREN
   99        | ID LPAREN RPAREN

  100 exps: exp COMMA exps
  101     | exp

  102 if: IF LPAREN exp RPAREN block ELSE block
  103   | IF LPAREN exp RPAREN block

  104 while: WHILE LPAREN exp RPAREN block

  105 loop: LOOP block

  106 box-new: BOX PATH NEW LPAREN exp RPAREN

  107 arr-index: exp LSQUARE exp RSQUARE

  108 flup: exp DOT exp

  109 match: MATCH LPAREN exp RPAREN LCURLY match-arms RCURLY

  110 match-arms: match-arm COMMA match-arms
  111           | match-arm

  112 match-arm: pat-or MATCH_ARROW block

  113 pat-or: pat BITOR pat-or
  114       | pat

  115 pat: name-bind
  116    | prim-lit
  117    | NEGATIVE_SIGN
  118    | LPAREN RPAREN
  119    | pat-deref
  120    | UNDERSCORE
  121    | pat-arr
  122    | pat-enum
  123    | pat-struct

  124 name-bind: ID
  125          | REF ID
  126          | REF MUT ID
  127          | MUT ID

  128 pat-deref: ADDRESS pat

  129 pat-arr: LSQUARE array-elmts RSQUARE

  130 pat-enum: ID PATH ID LPAREN ctor-elmts RPAREN
  131         | ID PATH ID

  132 pat-struct: ID LCURLY id-pat-annots RCURLY

  133 array-elmts: pat COMMA array-elmts
  134            | pat

  135 ctor-elmts: pat COMMA ctor-elmts
  136           | pat

  137 id-pat-annots: id-pat-annot COMMA id-pat-annots
  138              | id-pat-annot

  139 id-pat-annot: ID COLON pat

  140 type: ID
  141     | BOOL
  142     | U8
  143     | I32
  144     | LPAREN RPAREN
  145     | LSQUARE type RSQUARE
  146     | LSQUARE type SEMICOLON LITDEC RSQUARE
  147     | ADDRESS type
  148     | ADDRESS MUT type
  149     | BOX LT type GT

  150 literal: prim-lit
  151        | comp-lit

  152 prim-lit: lit-bool
  153         | LITCHAR
  154         | LITDEC
  155         | LITSTR

  156 comp-lit: lit-enum
  157         | lit-struct
  158         | lit-array

  159 lit-bool: TRU
  160         | FALS

  161 lit-enum: ID PATH ID
  162         | ID PATH ID LPAREN enum-exps RPAREN

  163 enum-exps: exp COMMA enum-exps
  164          | exp

  165 lit-struct: ID LCURLY id-exp-annots RCURLY

  166 id-exp-annots: id-exp-annot COMMA id-exp-annots
  167              | id-exp-annot

  168 id-exp-annot: ID COLON exp

  169 lit-array: LSQUARE enum-exps RSQUARE


Terminals, with rules where they appear

$end (0) 0
error (256)
BOOL_OR (258) 74
BOOL_AND (259) 75
ADD (260) 82
NEGATIVE_SIGN (261) 83 87 117
ASTERISK (262) 84 89
DIV (263) 85
EXCLAMATION (264) 12 13 88
EQ (265) 76
NE (266) 77
REM (267) 86
LT (268) 78 149
GT (269) 79 149
LE (270) 80
GE (271) 81
ADDRESS (272) 90 91 128 147 148
LPAREN (273) 8 9 10 11 12 13 23 44 46 98 99 102 103 104 106 109 118
    130 144 162
RPAREN (274) 8 9 10 11 12 13 23 44 46 98 99 102 103 104 106 109 118
    130 144 162
MUT (275) 91 126 127 148
AS (276)
SHL (277)
SHR (278)
BITAND (279)
BITXOR (280)
BITOR (281) 113
ASSIGNMENT (282) 40 41 97
RANGE (283)
PLUS_ASSIGN (284) 92
SUB_ASSIGN (285) 93
MUL_ASSIGN (286) 94
DIV_ASSIGN (287) 95
REM_ASSIGN (288) 96
BITAND_ASSIGN (289)
BITXOR_ASSIGN (290)
BITOR_ASSIGN (291)
SHL_ASSIGN (292)
SHR_ASSIGN (293)
PATH (294) 106 130 131 161 162
FUNCTION_ARROW (295) 9 11 12 13
MATCH_ARROW (296) 112
DIRECTIVE (297)
DIRECTIVE_FEATURE (298)
APOST (299)
DOLLAR (300)
LSQUARE (301) 107 129 145 146 169
RSQUARE (302) 107 129 145 146 169
LCURLY (303) 19 26 30 31 109 132 165
RCURLY (304) 19 26 30 31 109 132 165
TRIPLE_DOT (305)
DOT (306) 108
COMMA (307) 14 20 24 27 100 110 133 135 137 163 166
COLON (308) 17 29 40 42 139 168
SEMICOLON (309) 35 36 37 38 146
ABSTRACT (310)
ALIGNOF (311)
BE (312)
BOX (313) 106 149
BREAK (314)
CASE (315)
CONST (316)
CONTINUE (317)
CRATE (318)
DO (319)
ELSE (320) 102
ENUM (321) 19
EXTERN (322)
FINAL (323)
FN (324) 8 9 10 11 12 13
FOR (325)
IF (326) 102 103
IMPL (327)
IN (328)
LET (329) 39 40 41 42
LOOP (330) 105
MACRO (331)
MACRO_RULES (332)
MATCH (333) 109
MOD (334)
MOVE (335)
NEW (336) 106
OFFSETOF (337)
OVERRIDE (338)
PRIV (339)
PUB (340)
PURE (341)
REF (342) 125 126
RETURN (343) 36 37
SIZEOF (344)
STATIC (345)
SELF (346)
STRUCT (347) 26
SUPER (348)
TRAIT (349)
TYPE (350)
TYPEOF (351)
UNKNOWN (352)
UNSAFE (353)
UNSIZED (354)
USE (355)
VIRTUAL (356)
WHERE (357)
WHILE (358) 104
YIELD (359)
UNIT (360)
BOOL (361) 141
U8 (362) 142
U16 (363)
U32 (364)
U64 (365)
I8 (366)
I16 (367)
I32 (368) 143
I64 (369)
F32 (370)
F64 (371)
USIZE (372)
ISIZE (373)
CHAR (374)
STR (375)
UNDERSCORE (376) 120
LITDEC (377) 146 154
ID (378) 8 9 10 11 12 13 19 22 23 26 29 45 98 99 124 125 126 127 130
    131 132 139 140 161 162 165 168
LITSTR (379) 155
LITCHAR (380) 153
FALS (381) 160
TRU (382) 159
FLSUFFi (383)
EXCOMMA_L (384)
EXCOMMA_H (385)
ADDRMUT (386)
DEREF (387)
UMINUS (388)
NOT (389)
FNCALLEXP (390)
FLUPSHIFT (391)
NULLLIST (392)
END (393)


Nonterminals, with rules where they appear

$accept (139)
    on left: 0
program (140)
    on left: 1, on right: 0
crate (141)
    on left: 2, on right: 1
items (142)
    on left: 3 4, on right: 2 3
item (143)
    on left: 5 6 7, on right: 3 4
fn-def (144)
    on left: 8 9 10 11 12 13, on right: 5
fn-params (145)
    on left: 14 15, on right: 10 11 12 14
fn-param (146)
    on left: 16, on right: 14 15
pat-type-annot (147)
    on left: 17, on right: 16
ret (148)
    on left: 18, on right: 9 11
enum-def (149)
    on left: 19, on right: 6
enum-ctor-defs (150)
    on left: 20 21, on right: 19 20
enum-ctor-def (151)
    on left: 22 23, on right: 20 21
ctor-types (152)
    on left: 24 25, on right: 23 24
struct-def (153)
    on left: 26, on right: 7
type-annots (154)
    on left: 27 28, on right: 26 27
type-annot (155)
    on left: 29, on right: 27 28
block (156)
    on left: 30 31, on right: 8 9 10 11 12 13 102 103 104 105 112
stmts (157)
    on left: 32 33 34, on right: 30 32
stmt (158)
    on left: 35 36 37 38, on right: 32 33
let (159)
    on left: 39 40 41 42, on right: 38
exp (160)
    on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
    61 62 63 64 65 66 67 68 69 70 71 72 73, on right: 34 35 36 40 41
    44 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93
    94 95 96 97 100 101 102 103 104 106 107 108 109 163 164 168
or (161)
    on left: 74, on right: 47
and (162)
    on left: 75, on right: 48
eq (163)
    on left: 76, on right: 49
neq (164)
    on left: 77, on right: 50
lt (165)
    on left: 78, on right: 51
gt (166)
    on left: 79, on right: 52
leq (167)
    on left: 80, on right: 54
geq (168)
    on left: 81, on right: 53
add (169)
    on left: 82, on right: 55
sub (170)
    on left: 83, on right: 56
mul (171)
    on left: 84, on right: 57
div (172)
    on left: 85, on right: 58
rem (173)
    on left: 86, on right: 59
neg (174)
    on left: 87, on right: 60
not (175)
    on left: 88, on right: 61
deref (176)
    on left: 89, on right: 62
addr-of (177)
    on left: 90, on right: 63
addr-of-mut (178)
    on left: 91, on right: 64
assign (179)
    on left: 92 93 94 95 96 97, on right: 65
fn-call (180)
    on left: 98 99, on right: 66
exps (181)
    on left: 100 101, on right: 98 100
if (182)
    on left: 102 103, on right: 67
while (183)
    on left: 104, on right: 68
loop (184)
    on left: 105, on right: 69
box-new (185)
    on left: 106, on right: 70
arr-index (186)
    on left: 107, on right: 71
flup (187)
    on left: 108, on right: 72
match (188)
    on left: 109, on right: 73
match-arms (189)
    on left: 110 111, on right: 109 110
match-arm (190)
    on left: 112, on right: 110 111
pat-or (191)
    on left: 113 114, on right: 112 113
pat (192)
    on left: 115 116 117 118 119 120 121 122 123, on right: 17 39 40
    41 42 113 114 128 133 134 135 136 139
name-bind (193)
    on left: 124 125 126 127, on right: 115
pat-deref (194)
    on left: 128, on right: 119
pat-arr (195)
    on left: 129, on right: 121
pat-enum (196)
    on left: 130 131, on right: 122
pat-struct (197)
    on left: 132, on right: 123
array-elmts (198)
    on left: 133 134, on right: 129 133
ctor-elmts (199)
    on left: 135 136, on right: 130 135
id-pat-annots (200)
    on left: 137 138, on right: 132 137
id-pat-annot (201)
    on left: 139, on right: 137 138
type (202)
    on left: 140 141 142 143 144 145 146 147 148 149, on right: 17
    18 24 25 29 40 42 145 146 147 148 149
literal (203)
    on left: 150 151, on right: 43
prim-lit (204)
    on left: 152 153 154 155, on right: 116 150
comp-lit (205)
    on left: 156 157 158, on right: 151
lit-bool (206)
    on left: 159 160, on right: 152
lit-enum (207)
    on left: 161 162, on right: 156
enum-exps (208)
    on left: 163 164, on right: 162 163 169
lit-struct (209)
    on left: 165, on right: 157
id-exp-annots (210)
    on left: 166 167, on right: 165 166
id-exp-annot (211)
    on left: 168, on right: 166 167
lit-array (212)
    on left: 169, on right: 158


State 0

    0 $accept: . program $end

    ENUM    shift, and go to state 1
    FN      shift, and go to state 2
    STRUCT  shift, and go to state 3

    program     go to state 4
    crate       go to state 5
    items       go to state 6
    item        go to state 7
    fn-def      go to state 8
    enum-def    go to state 9
    struct-def  go to state 10


State 1

   19 enum-def: ENUM . ID LCURLY enum-ctor-defs RCURLY

    ID  shift, and go to state 11


State 2

    8 fn-def: FN . ID LPAREN RPAREN block
    9       | FN . ID LPAREN RPAREN FUNCTION_ARROW ret block
   10       | FN . ID LPAREN fn-params RPAREN block
   11       | FN . ID LPAREN fn-params RPAREN FUNCTION_ARROW ret block
   12       | FN . ID LPAREN fn-params RPAREN FUNCTION_ARROW EXCLAMATION block
   13       | FN . ID LPAREN RPAREN FUNCTION_ARROW EXCLAMATION block

    ID  shift, and go to state 12


State 3

   26 struct-def: STRUCT . ID LCURLY type-annots RCURLY

    ID  shift, and go to state 13


State 4

    0 $accept: program . $end

    $end  shift, and go to state 14


State 5

    1 program: crate .

    $default  reduce using rule 1 (program)


State 6

    2 crate: items .

    $default  reduce using rule 2 (crate)


State 7

    3 items: item . items
    4      | item .

    ENUM    shift, and go to state 1
    FN      shift, and go to state 2
    STRUCT  shift, and go to state 3

    $default  reduce using rule 4 (items)

    items       go to state 15
    item        go to state 7
    fn-def      go to state 8
    enum-def    go to state 9
    struct-def  go to state 10


State 8

    5 item: fn-def .

    $default  reduce using rule 5 (item)


State 9

    6 item: enum-def .

    $default  reduce using rule 6 (item)


State 10

    7 item: struct-def .

    $default  reduce using rule 7 (item)


State 11

   19 enum-def: ENUM ID . LCURLY enum-ctor-defs RCURLY

    LCURLY  shift, and go to state 16


State 12

    8 fn-def: FN ID . LPAREN RPAREN block
    9       | FN ID . LPAREN RPAREN FUNCTION_ARROW ret block
   10       | FN ID . LPAREN fn-params RPAREN block
   11       | FN ID . LPAREN fn-params RPAREN FUNCTION_ARROW ret block
   12       | FN ID . LPAREN fn-params RPAREN FUNCTION_ARROW EXCLAMATION block
   13       | FN ID . LPAREN RPAREN FUNCTION_ARROW EXCLAMATION block

    LPAREN  shift, and go to state 17


State 13

   26 struct-def: STRUCT ID . LCURLY type-annots RCURLY

    LCURLY  shift, and go to state 18


State 14

    0 $accept: program $end .

    $default  accept


State 15

    3 items: item items .

    $default  reduce using rule 3 (items)


State 16

   19 enum-def: ENUM ID LCURLY . enum-ctor-defs RCURLY

    ID  shift, and go to state 19

    enum-ctor-defs  go to state 20
    enum-ctor-def   go to state 21


State 17

    8 fn-def: FN ID LPAREN . RPAREN block
    9       | FN ID LPAREN . RPAREN FUNCTION_ARROW ret block
   10       | FN ID LPAREN . fn-params RPAREN block
   11       | FN ID LPAREN . fn-params RPAREN FUNCTION_ARROW ret block
   12       | FN ID LPAREN . fn-params RPAREN FUNCTION_ARROW EXCLAMATION block
   13       | FN ID LPAREN . RPAREN FUNCTION_ARROW EXCLAMATION block

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    RPAREN         shift, and go to state 25
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    fn-params       go to state 36
    fn-param        go to state 37
    pat-type-annot  go to state 38
    pat             go to state 39
    name-bind       go to state 40
    pat-deref       go to state 41
    pat-arr         go to state 42
    pat-enum        go to state 43
    pat-struct      go to state 44
    prim-lit        go to state 45
    lit-bool        go to state 46


State 18

   26 struct-def: STRUCT ID LCURLY . type-annots RCURLY

    ID  shift, and go to state 47

    type-annots  go to state 48
    type-annot   go to state 49


State 19

   22 enum-ctor-def: ID .
   23              | ID . LPAREN ctor-types RPAREN

    LPAREN  shift, and go to state 50

    $default  reduce using rule 22 (enum-ctor-def)


State 20

   19 enum-def: ENUM ID LCURLY enum-ctor-defs . RCURLY

    RCURLY  shift, and go to state 51


State 21

   20 enum-ctor-defs: enum-ctor-def . COMMA enum-ctor-defs
   21               | enum-ctor-def .

    COMMA  shift, and go to state 52

    $default  reduce using rule 21 (enum-ctor-defs)


State 22

  117 pat: NEGATIVE_SIGN .

    $default  reduce using rule 117 (pat)


State 23

  128 pat-deref: ADDRESS . pat

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat         go to state 53
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 24

  118 pat: LPAREN . RPAREN

    RPAREN  shift, and go to state 54


State 25

    8 fn-def: FN ID LPAREN RPAREN . block
    9       | FN ID LPAREN RPAREN . FUNCTION_ARROW ret block
   13       | FN ID LPAREN RPAREN . FUNCTION_ARROW EXCLAMATION block

    FUNCTION_ARROW  shift, and go to state 55
    LCURLY          shift, and go to state 56

    block  go to state 57


State 26

  127 name-bind: MUT . ID

    ID  shift, and go to state 58


State 27

  129 pat-arr: LSQUARE . array-elmts RSQUARE

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat          go to state 59
    name-bind    go to state 40
    pat-deref    go to state 41
    pat-arr      go to state 42
    pat-enum     go to state 43
    pat-struct   go to state 44
    array-elmts  go to state 60
    prim-lit     go to state 45
    lit-bool     go to state 46


State 28

  125 name-bind: REF . ID
  126          | REF . MUT ID

    MUT  shift, and go to state 61
    ID   shift, and go to state 62


State 29

  120 pat: UNDERSCORE .

    $default  reduce using rule 120 (pat)


State 30

  154 prim-lit: LITDEC .

    $default  reduce using rule 154 (prim-lit)


State 31

  124 name-bind: ID .
  130 pat-enum: ID . PATH ID LPAREN ctor-elmts RPAREN
  131         | ID . PATH ID
  132 pat-struct: ID . LCURLY id-pat-annots RCURLY

    PATH    shift, and go to state 63
    LCURLY  shift, and go to state 64

    $default  reduce using rule 124 (name-bind)


State 32

  155 prim-lit: LITSTR .

    $default  reduce using rule 155 (prim-lit)


State 33

  153 prim-lit: LITCHAR .

    $default  reduce using rule 153 (prim-lit)


State 34

  160 lit-bool: FALS .

    $default  reduce using rule 160 (lit-bool)


State 35

  159 lit-bool: TRU .

    $default  reduce using rule 159 (lit-bool)


State 36

   10 fn-def: FN ID LPAREN fn-params . RPAREN block
   11       | FN ID LPAREN fn-params . RPAREN FUNCTION_ARROW ret block
   12       | FN ID LPAREN fn-params . RPAREN FUNCTION_ARROW EXCLAMATION block

    RPAREN  shift, and go to state 65


State 37

   14 fn-params: fn-param . COMMA fn-params
   15          | fn-param .

    COMMA  shift, and go to state 66

    $default  reduce using rule 15 (fn-params)


State 38

   16 fn-param: pat-type-annot .

    $default  reduce using rule 16 (fn-param)


State 39

   17 pat-type-annot: pat . COLON type

    COLON  shift, and go to state 67


State 40

  115 pat: name-bind .

    $default  reduce using rule 115 (pat)


State 41

  119 pat: pat-deref .

    $default  reduce using rule 119 (pat)


State 42

  121 pat: pat-arr .

    $default  reduce using rule 121 (pat)


State 43

  122 pat: pat-enum .

    $default  reduce using rule 122 (pat)


State 44

  123 pat: pat-struct .

    $default  reduce using rule 123 (pat)


State 45

  116 pat: prim-lit .

    $default  reduce using rule 116 (pat)


State 46

  152 prim-lit: lit-bool .

    $default  reduce using rule 152 (prim-lit)


State 47

   29 type-annot: ID . COLON type

    COLON  shift, and go to state 68


State 48

   26 struct-def: STRUCT ID LCURLY type-annots . RCURLY

    RCURLY  shift, and go to state 69


State 49

   27 type-annots: type-annot . COMMA type-annots
   28            | type-annot .

    COMMA  shift, and go to state 70

    $default  reduce using rule 28 (type-annots)


State 50

   23 enum-ctor-def: ID LPAREN . ctor-types RPAREN

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    ctor-types  go to state 79
    type        go to state 80


State 51

   19 enum-def: ENUM ID LCURLY enum-ctor-defs RCURLY .

    $default  reduce using rule 19 (enum-def)


State 52

   20 enum-ctor-defs: enum-ctor-def COMMA . enum-ctor-defs

    ID  shift, and go to state 19

    enum-ctor-defs  go to state 81
    enum-ctor-def   go to state 21


State 53

  128 pat-deref: ADDRESS pat .

    $default  reduce using rule 128 (pat-deref)


State 54

  118 pat: LPAREN RPAREN .

    $default  reduce using rule 118 (pat)


State 55

    9 fn-def: FN ID LPAREN RPAREN FUNCTION_ARROW . ret block
   13       | FN ID LPAREN RPAREN FUNCTION_ARROW . EXCLAMATION block

    EXCLAMATION  shift, and go to state 82
    ADDRESS      shift, and go to state 71
    LPAREN       shift, and go to state 72
    LSQUARE      shift, and go to state 73
    BOX          shift, and go to state 74
    BOOL         shift, and go to state 75
    U8           shift, and go to state 76
    I32          shift, and go to state 77
    ID           shift, and go to state 78

    ret   go to state 83
    type  go to state 84


State 56

   30 block: LCURLY . stmts RCURLY
   31      | LCURLY . RCURLY

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    RCURLY         shift, and go to state 91
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LET            shift, and go to state 94
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    RETURN         shift, and go to state 97
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    stmts        go to state 100
    stmt         go to state 101
    let          go to state 102
    exp          go to state 103
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 57

    8 fn-def: FN ID LPAREN RPAREN block .

    $default  reduce using rule 8 (fn-def)


State 58

  127 name-bind: MUT ID .

    $default  reduce using rule 127 (name-bind)


State 59

  133 array-elmts: pat . COMMA array-elmts
  134            | pat .

    COMMA  shift, and go to state 137

    $default  reduce using rule 134 (array-elmts)


State 60

  129 pat-arr: LSQUARE array-elmts . RSQUARE

    RSQUARE  shift, and go to state 138


State 61

  126 name-bind: REF MUT . ID

    ID  shift, and go to state 139


State 62

  125 name-bind: REF ID .

    $default  reduce using rule 125 (name-bind)


State 63

  130 pat-enum: ID PATH . ID LPAREN ctor-elmts RPAREN
  131         | ID PATH . ID

    ID  shift, and go to state 140


State 64

  132 pat-struct: ID LCURLY . id-pat-annots RCURLY

    ID  shift, and go to state 141

    id-pat-annots  go to state 142
    id-pat-annot   go to state 143


State 65

   10 fn-def: FN ID LPAREN fn-params RPAREN . block
   11       | FN ID LPAREN fn-params RPAREN . FUNCTION_ARROW ret block
   12       | FN ID LPAREN fn-params RPAREN . FUNCTION_ARROW EXCLAMATION block

    FUNCTION_ARROW  shift, and go to state 144
    LCURLY          shift, and go to state 56

    block  go to state 145


State 66

   14 fn-params: fn-param COMMA . fn-params

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    fn-params       go to state 146
    fn-param        go to state 37
    pat-type-annot  go to state 38
    pat             go to state 39
    name-bind       go to state 40
    pat-deref       go to state 41
    pat-arr         go to state 42
    pat-enum        go to state 43
    pat-struct      go to state 44
    prim-lit        go to state 45
    lit-bool        go to state 46


State 67

   17 pat-type-annot: pat COLON . type

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 147


State 68

   29 type-annot: ID COLON . type

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 148


State 69

   26 struct-def: STRUCT ID LCURLY type-annots RCURLY .

    $default  reduce using rule 26 (struct-def)


State 70

   27 type-annots: type-annot COMMA . type-annots

    ID  shift, and go to state 47

    type-annots  go to state 149
    type-annot   go to state 49


State 71

  147 type: ADDRESS . type
  148     | ADDRESS . MUT type

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    MUT      shift, and go to state 150
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 151


State 72

  144 type: LPAREN . RPAREN

    RPAREN  shift, and go to state 152


State 73

  145 type: LSQUARE . type RSQUARE
  146     | LSQUARE . type SEMICOLON LITDEC RSQUARE

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 153


State 74

  149 type: BOX . LT type GT

    LT  shift, and go to state 154


State 75

  141 type: BOOL .

    $default  reduce using rule 141 (type)


State 76

  142 type: U8 .

    $default  reduce using rule 142 (type)


State 77

  143 type: I32 .

    $default  reduce using rule 143 (type)


State 78

  140 type: ID .

    $default  reduce using rule 140 (type)


State 79

   23 enum-ctor-def: ID LPAREN ctor-types . RPAREN

    RPAREN  shift, and go to state 155


State 80

   24 ctor-types: type . COMMA ctor-types
   25           | type .

    COMMA  shift, and go to state 156

    $default  reduce using rule 25 (ctor-types)


State 81

   20 enum-ctor-defs: enum-ctor-def COMMA enum-ctor-defs .

    $default  reduce using rule 20 (enum-ctor-defs)


State 82

   13 fn-def: FN ID LPAREN RPAREN FUNCTION_ARROW EXCLAMATION . block

    LCURLY  shift, and go to state 56

    block  go to state 157


State 83

    9 fn-def: FN ID LPAREN RPAREN FUNCTION_ARROW ret . block

    LCURLY  shift, and go to state 56

    block  go to state 158


State 84

   18 ret: type .

    $default  reduce using rule 18 (ret)


State 85

   87 neg: NEGATIVE_SIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 159
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 86

   89 deref: ASTERISK . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 160
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 87

   88 not: EXCLAMATION . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 161
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 88

   90 addr-of: ADDRESS . exp
   91 addr-of-mut: ADDRESS . MUT exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    MUT            shift, and go to state 162
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 163
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 89

   44 exp: LPAREN . exp RPAREN
   46    | LPAREN . RPAREN

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    RPAREN         shift, and go to state 164
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 165
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 90

  169 lit-array: LSQUARE . enum-exps RSQUARE

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 166
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    enum-exps    go to state 167
    lit-struct   go to state 135
    lit-array    go to state 136


State 91

   31 block: LCURLY RCURLY .

    $default  reduce using rule 31 (block)


State 92

  106 box-new: BOX . PATH NEW LPAREN exp RPAREN

    PATH  shift, and go to state 168


State 93

  102 if: IF . LPAREN exp RPAREN block ELSE block
  103   | IF . LPAREN exp RPAREN block

    LPAREN  shift, and go to state 169


State 94

   39 let: LET . pat
   40    | LET . pat COLON type ASSIGNMENT exp
   41    | LET . pat ASSIGNMENT exp
   42    | LET . pat COLON type

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat         go to state 170
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 95

  105 loop: LOOP . block

    LCURLY  shift, and go to state 56

    block  go to state 171


State 96

  109 match: MATCH . LPAREN exp RPAREN LCURLY match-arms RCURLY

    LPAREN  shift, and go to state 172


State 97

   36 stmt: RETURN . exp SEMICOLON
   37     | RETURN . SEMICOLON

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    SEMICOLON      shift, and go to state 173
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 174
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 98

  104 while: WHILE . LPAREN exp RPAREN block

    LPAREN  shift, and go to state 175


State 99

   45 exp: ID .
   98 fn-call: ID . LPAREN exps RPAREN
   99        | ID . LPAREN RPAREN
  161 lit-enum: ID . PATH ID
  162         | ID . PATH ID LPAREN enum-exps RPAREN
  165 lit-struct: ID . LCURLY id-exp-annots RCURLY

    LPAREN  shift, and go to state 176
    PATH    shift, and go to state 177
    LCURLY  shift, and go to state 178

    $default  reduce using rule 45 (exp)


State 100

   30 block: LCURLY stmts . RCURLY

    RCURLY  shift, and go to state 179


State 101

   32 stmts: stmt . stmts
   33      | stmt .

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LET            shift, and go to state 94
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    RETURN         shift, and go to state 97
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    $default  reduce using rule 33 (stmts)

    stmts        go to state 180
    stmt         go to state 101
    let          go to state 102
    exp          go to state 103
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 102

   38 stmt: let . SEMICOLON

    SEMICOLON  shift, and go to state 181


State 103

   34 stmts: exp .
   35 stmt: exp . SEMICOLON
   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202
    SEMICOLON      shift, and go to state 203

    $default  reduce using rule 34 (stmts)


State 104

   47 exp: or .

    $default  reduce using rule 47 (exp)


State 105

   48 exp: and .

    $default  reduce using rule 48 (exp)


State 106

   49 exp: eq .

    $default  reduce using rule 49 (exp)


State 107

   50 exp: neq .

    $default  reduce using rule 50 (exp)


State 108

   51 exp: lt .

    $default  reduce using rule 51 (exp)


State 109

   52 exp: gt .

    $default  reduce using rule 52 (exp)


State 110

   54 exp: leq .

    $default  reduce using rule 54 (exp)


State 111

   53 exp: geq .

    $default  reduce using rule 53 (exp)


State 112

   55 exp: add .

    $default  reduce using rule 55 (exp)


State 113

   56 exp: sub .

    $default  reduce using rule 56 (exp)


State 114

   57 exp: mul .

    $default  reduce using rule 57 (exp)


State 115

   58 exp: div .

    $default  reduce using rule 58 (exp)


State 116

   59 exp: rem .

    $default  reduce using rule 59 (exp)


State 117

   60 exp: neg .

    $default  reduce using rule 60 (exp)


State 118

   61 exp: not .

    $default  reduce using rule 61 (exp)


State 119

   62 exp: deref .

    $default  reduce using rule 62 (exp)


State 120

   63 exp: addr-of .

    $default  reduce using rule 63 (exp)


State 121

   64 exp: addr-of-mut .

    $default  reduce using rule 64 (exp)


State 122

   65 exp: assign .

    $default  reduce using rule 65 (exp)


State 123

   66 exp: fn-call .

    $default  reduce using rule 66 (exp)


State 124

   67 exp: if .

    $default  reduce using rule 67 (exp)


State 125

   68 exp: while .

    $default  reduce using rule 68 (exp)


State 126

   69 exp: loop .

    $default  reduce using rule 69 (exp)


State 127

   70 exp: box-new .

    $default  reduce using rule 70 (exp)


State 128

   71 exp: arr-index .

    $default  reduce using rule 71 (exp)


State 129

   72 exp: flup .

    $default  reduce using rule 72 (exp)


State 130

   73 exp: match .

    $default  reduce using rule 73 (exp)


State 131

   43 exp: literal .

    $default  reduce using rule 43 (exp)


State 132

  150 literal: prim-lit .

    $default  reduce using rule 150 (literal)


State 133

  151 literal: comp-lit .

    $default  reduce using rule 151 (literal)


State 134

  156 comp-lit: lit-enum .

    $default  reduce using rule 156 (comp-lit)


State 135

  157 comp-lit: lit-struct .

    $default  reduce using rule 157 (comp-lit)


State 136

  158 comp-lit: lit-array .

    $default  reduce using rule 158 (comp-lit)


State 137

  133 array-elmts: pat COMMA . array-elmts

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat          go to state 59
    name-bind    go to state 40
    pat-deref    go to state 41
    pat-arr      go to state 42
    pat-enum     go to state 43
    pat-struct   go to state 44
    array-elmts  go to state 204
    prim-lit     go to state 45
    lit-bool     go to state 46


State 138

  129 pat-arr: LSQUARE array-elmts RSQUARE .

    $default  reduce using rule 129 (pat-arr)


State 139

  126 name-bind: REF MUT ID .

    $default  reduce using rule 126 (name-bind)


State 140

  130 pat-enum: ID PATH ID . LPAREN ctor-elmts RPAREN
  131         | ID PATH ID .

    LPAREN  shift, and go to state 205

    $default  reduce using rule 131 (pat-enum)


State 141

  139 id-pat-annot: ID . COLON pat

    COLON  shift, and go to state 206


State 142

  132 pat-struct: ID LCURLY id-pat-annots . RCURLY

    RCURLY  shift, and go to state 207


State 143

  137 id-pat-annots: id-pat-annot . COMMA id-pat-annots
  138              | id-pat-annot .

    COMMA  shift, and go to state 208

    $default  reduce using rule 138 (id-pat-annots)


State 144

   11 fn-def: FN ID LPAREN fn-params RPAREN FUNCTION_ARROW . ret block
   12       | FN ID LPAREN fn-params RPAREN FUNCTION_ARROW . EXCLAMATION block

    EXCLAMATION  shift, and go to state 209
    ADDRESS      shift, and go to state 71
    LPAREN       shift, and go to state 72
    LSQUARE      shift, and go to state 73
    BOX          shift, and go to state 74
    BOOL         shift, and go to state 75
    U8           shift, and go to state 76
    I32          shift, and go to state 77
    ID           shift, and go to state 78

    ret   go to state 210
    type  go to state 84


State 145

   10 fn-def: FN ID LPAREN fn-params RPAREN block .

    $default  reduce using rule 10 (fn-def)


State 146

   14 fn-params: fn-param COMMA fn-params .

    $default  reduce using rule 14 (fn-params)


State 147

   17 pat-type-annot: pat COLON type .

    $default  reduce using rule 17 (pat-type-annot)


State 148

   29 type-annot: ID COLON type .

    $default  reduce using rule 29 (type-annot)


State 149

   27 type-annots: type-annot COMMA type-annots .

    $default  reduce using rule 27 (type-annots)


State 150

  148 type: ADDRESS MUT . type

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 211


State 151

  147 type: ADDRESS type .

    $default  reduce using rule 147 (type)


State 152

  144 type: LPAREN RPAREN .

    $default  reduce using rule 144 (type)


State 153

  145 type: LSQUARE type . RSQUARE
  146     | LSQUARE type . SEMICOLON LITDEC RSQUARE

    RSQUARE    shift, and go to state 212
    SEMICOLON  shift, and go to state 213


State 154

  149 type: BOX LT . type GT

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 214


State 155

   23 enum-ctor-def: ID LPAREN ctor-types RPAREN .

    $default  reduce using rule 23 (enum-ctor-def)


State 156

   24 ctor-types: type COMMA . ctor-types

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    ctor-types  go to state 215
    type        go to state 80


State 157

   13 fn-def: FN ID LPAREN RPAREN FUNCTION_ARROW EXCLAMATION block .

    $default  reduce using rule 13 (fn-def)


State 158

    9 fn-def: FN ID LPAREN RPAREN FUNCTION_ARROW ret block .

    $default  reduce using rule 9 (fn-def)


State 159

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   87 neg: NEGATIVE_SIGN exp .
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    LSQUARE  shift, and go to state 201
    DOT      shift, and go to state 202

    $default  reduce using rule 87 (neg)


State 160

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   89 deref: ASTERISK exp .
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    LSQUARE  shift, and go to state 201
    DOT      shift, and go to state 202

    $default  reduce using rule 89 (deref)


State 161

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   88 not: EXCLAMATION exp .
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    LSQUARE  shift, and go to state 201
    DOT      shift, and go to state 202

    $default  reduce using rule 88 (not)


State 162

   91 addr-of-mut: ADDRESS MUT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 216
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 163

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   90 addr-of: ADDRESS exp .
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    LSQUARE  shift, and go to state 201
    DOT      shift, and go to state 202

    $default  reduce using rule 90 (addr-of)


State 164

   46 exp: LPAREN RPAREN .

    $default  reduce using rule 46 (exp)


State 165

   44 exp: LPAREN exp . RPAREN
   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    RPAREN         shift, and go to state 217
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202


State 166

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp
  163 enum-exps: exp . COMMA enum-exps
  164          | exp .

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202
    COMMA          shift, and go to state 218

    $default  reduce using rule 164 (enum-exps)


State 167

  169 lit-array: LSQUARE enum-exps . RSQUARE

    RSQUARE  shift, and go to state 219


State 168

  106 box-new: BOX PATH . NEW LPAREN exp RPAREN

    NEW  shift, and go to state 220


State 169

  102 if: IF LPAREN . exp RPAREN block ELSE block
  103   | IF LPAREN . exp RPAREN block

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 221
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 170

   39 let: LET pat .
   40    | LET pat . COLON type ASSIGNMENT exp
   41    | LET pat . ASSIGNMENT exp
   42    | LET pat . COLON type

    ASSIGNMENT  shift, and go to state 222
    COLON       shift, and go to state 223

    $default  reduce using rule 39 (let)


State 171

  105 loop: LOOP block .

    $default  reduce using rule 105 (loop)


State 172

  109 match: MATCH LPAREN . exp RPAREN LCURLY match-arms RCURLY

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 224
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 173

   37 stmt: RETURN SEMICOLON .

    $default  reduce using rule 37 (stmt)


State 174

   36 stmt: RETURN exp . SEMICOLON
   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202
    SEMICOLON      shift, and go to state 225


State 175

  104 while: WHILE LPAREN . exp RPAREN block

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 226
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 176

   98 fn-call: ID LPAREN . exps RPAREN
   99        | ID LPAREN . RPAREN

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    RPAREN         shift, and go to state 227
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 228
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    exps         go to state 229
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 177

  161 lit-enum: ID PATH . ID
  162         | ID PATH . ID LPAREN enum-exps RPAREN

    ID  shift, and go to state 230


State 178

  165 lit-struct: ID LCURLY . id-exp-annots RCURLY

    ID  shift, and go to state 231

    id-exp-annots  go to state 232
    id-exp-annot   go to state 233


State 179

   30 block: LCURLY stmts RCURLY .

    $default  reduce using rule 30 (block)


State 180

   32 stmts: stmt stmts .

    $default  reduce using rule 32 (stmts)


State 181

   38 stmt: let SEMICOLON .

    $default  reduce using rule 38 (stmt)


State 182

   74 or: exp BOOL_OR . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 234
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 183

   75 and: exp BOOL_AND . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 235
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 184

   82 add: exp ADD . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 236
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 185

   83 sub: exp NEGATIVE_SIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 237
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 186

   84 mul: exp ASTERISK . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 238
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 187

   85 div: exp DIV . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 239
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 188

   76 eq: exp EQ . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 240
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 189

   77 neq: exp NE . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 241
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 190

   86 rem: exp REM . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 242
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 191

   78 lt: exp LT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 243
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 192

   79 gt: exp GT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 244
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 193

   80 leq: exp LE . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 245
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 194

   81 geq: exp GE . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 246
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 195

   97 assign: exp ASSIGNMENT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 247
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 196

   92 assign: exp PLUS_ASSIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 248
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 197

   93 assign: exp SUB_ASSIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 249
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 198

   94 assign: exp MUL_ASSIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 250
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 199

   95 assign: exp DIV_ASSIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 251
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 200

   96 assign: exp REM_ASSIGN . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 252
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 201

  107 arr-index: exp LSQUARE . exp RSQUARE

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 253
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 202

  108 flup: exp DOT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 254
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 203

   35 stmt: exp SEMICOLON .

    $default  reduce using rule 35 (stmt)


State 204

  133 array-elmts: pat COMMA array-elmts .

    $default  reduce using rule 133 (array-elmts)


State 205

  130 pat-enum: ID PATH ID LPAREN . ctor-elmts RPAREN

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat         go to state 255
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    ctor-elmts  go to state 256
    prim-lit    go to state 45
    lit-bool    go to state 46


State 206

  139 id-pat-annot: ID COLON . pat

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat         go to state 257
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 207

  132 pat-struct: ID LCURLY id-pat-annots RCURLY .

    $default  reduce using rule 132 (pat-struct)


State 208

  137 id-pat-annots: id-pat-annot COMMA . id-pat-annots

    ID  shift, and go to state 141

    id-pat-annots  go to state 258
    id-pat-annot   go to state 143


State 209

   12 fn-def: FN ID LPAREN fn-params RPAREN FUNCTION_ARROW EXCLAMATION . block

    LCURLY  shift, and go to state 56

    block  go to state 259


State 210

   11 fn-def: FN ID LPAREN fn-params RPAREN FUNCTION_ARROW ret . block

    LCURLY  shift, and go to state 56

    block  go to state 260


State 211

  148 type: ADDRESS MUT type .

    $default  reduce using rule 148 (type)


State 212

  145 type: LSQUARE type RSQUARE .

    $default  reduce using rule 145 (type)


State 213

  146 type: LSQUARE type SEMICOLON . LITDEC RSQUARE

    LITDEC  shift, and go to state 261


State 214

  149 type: BOX LT type . GT

    GT  shift, and go to state 262


State 215

   24 ctor-types: type COMMA ctor-types .

    $default  reduce using rule 24 (ctor-types)


State 216

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   91 addr-of-mut: ADDRESS MUT exp .
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    LSQUARE  shift, and go to state 201
    DOT      shift, and go to state 202

    $default  reduce using rule 91 (addr-of-mut)


State 217

   44 exp: LPAREN exp RPAREN .

    $default  reduce using rule 44 (exp)


State 218

  163 enum-exps: exp COMMA . enum-exps

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 166
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    enum-exps    go to state 263
    lit-struct   go to state 135
    lit-array    go to state 136


State 219

  169 lit-array: LSQUARE enum-exps RSQUARE .

    $default  reduce using rule 169 (lit-array)


State 220

  106 box-new: BOX PATH NEW . LPAREN exp RPAREN

    LPAREN  shift, and go to state 264


State 221

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  102 if: IF LPAREN exp . RPAREN block ELSE block
  103   | IF LPAREN exp . RPAREN block
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    RPAREN         shift, and go to state 265
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202


State 222

   41 let: LET pat ASSIGNMENT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 266
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 223

   40 let: LET pat COLON . type ASSIGNMENT exp
   42    | LET pat COLON . type

    ADDRESS  shift, and go to state 71
    LPAREN   shift, and go to state 72
    LSQUARE  shift, and go to state 73
    BOX      shift, and go to state 74
    BOOL     shift, and go to state 75
    U8       shift, and go to state 76
    I32      shift, and go to state 77
    ID       shift, and go to state 78

    type  go to state 267


State 224

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp
  109 match: MATCH LPAREN exp . RPAREN LCURLY match-arms RCURLY

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    RPAREN         shift, and go to state 268
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202


State 225

   36 stmt: RETURN exp SEMICOLON .

    $default  reduce using rule 36 (stmt)


State 226

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  104 while: WHILE LPAREN exp . RPAREN block
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    RPAREN         shift, and go to state 269
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202


State 227

   99 fn-call: ID LPAREN RPAREN .

    $default  reduce using rule 99 (fn-call)


State 228

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  100 exps: exp . COMMA exps
  101     | exp .
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202
    COMMA          shift, and go to state 270

    $default  reduce using rule 101 (exps)


State 229

   98 fn-call: ID LPAREN exps . RPAREN

    RPAREN  shift, and go to state 271


State 230

  161 lit-enum: ID PATH ID .
  162         | ID PATH ID . LPAREN enum-exps RPAREN

    LPAREN  shift, and go to state 272

    $default  reduce using rule 161 (lit-enum)


State 231

  168 id-exp-annot: ID . COLON exp

    COLON  shift, and go to state 273


State 232

  165 lit-struct: ID LCURLY id-exp-annots . RCURLY

    RCURLY  shift, and go to state 274


State 233

  166 id-exp-annots: id-exp-annot . COMMA id-exp-annots
  167              | id-exp-annot .

    COMMA  shift, and go to state 275

    $default  reduce using rule 167 (id-exp-annots)


State 234

   74 or: exp . BOOL_OR exp
   74   | exp BOOL_OR exp .
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 74 (or)


State 235

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   75    | exp BOOL_AND exp .
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 75 (and)


State 236

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   82    | exp ADD exp .
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    ASTERISK  shift, and go to state 186
    DIV       shift, and go to state 187
    REM       shift, and go to state 190
    LSQUARE   shift, and go to state 201
    DOT       shift, and go to state 202

    $default  reduce using rule 82 (add)


State 237

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   83    | exp NEGATIVE_SIGN exp .
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    ASTERISK  shift, and go to state 186
    DIV       shift, and go to state 187
    REM       shift, and go to state 190
    LSQUARE   shift, and go to state 201
    DOT       shift, and go to state 202

    $default  reduce using rule 83 (sub)


State 238

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   84    | exp ASTERISK exp .
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    LSQUARE  shift, and go to state 201
    DOT      shift, and go to state 202

    $default  reduce using rule 84 (mul)


State 239

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   85    | exp DIV exp .
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    LSQUARE  shift, and go to state 201
    DOT      shift, and go to state 202

    $default  reduce using rule 85 (div)


State 240

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   76   | exp EQ exp .
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    REM            shift, and go to state 190
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 76 (eq)


State 241

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   77    | exp NE exp .
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    REM            shift, and go to state 190
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 77 (neq)


State 242

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   86    | exp REM exp .
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    LSQUARE  shift, and go to state 201
    DOT      shift, and go to state 202

    $default  reduce using rule 86 (rem)


State 243

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   78   | exp LT exp .
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    REM            shift, and go to state 190
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 78 (lt)


State 244

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   79   | exp GT exp .
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    REM            shift, and go to state 190
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 79 (gt)


State 245

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   80    | exp LE exp .
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    REM            shift, and go to state 190
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 80 (leq)


State 246

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   81    | exp GE exp .
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    REM            shift, and go to state 190
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 81 (geq)


State 247

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
   97       | exp ASSIGNMENT exp .
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 97 (assign)


State 248

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   92       | exp PLUS_ASSIGN exp .
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 92 (assign)


State 249

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   93       | exp SUB_ASSIGN exp .
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 93 (assign)


State 250

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   94       | exp MUL_ASSIGN exp .
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 94 (assign)


State 251

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   95       | exp DIV_ASSIGN exp .
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 95 (assign)


State 252

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   96       | exp REM_ASSIGN exp .
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 96 (assign)


State 253

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  107          | exp LSQUARE exp . RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    RSQUARE        shift, and go to state 276
    DOT            shift, and go to state 202


State 254

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp
  108     | exp DOT exp .

    $default  reduce using rule 108 (flup)


State 255

  135 ctor-elmts: pat . COMMA ctor-elmts
  136           | pat .

    COMMA  shift, and go to state 277

    $default  reduce using rule 136 (ctor-elmts)


State 256

  130 pat-enum: ID PATH ID LPAREN ctor-elmts . RPAREN

    RPAREN  shift, and go to state 278


State 257

  139 id-pat-annot: ID COLON pat .

    $default  reduce using rule 139 (id-pat-annot)


State 258

  137 id-pat-annots: id-pat-annot COMMA id-pat-annots .

    $default  reduce using rule 137 (id-pat-annots)


State 259

   12 fn-def: FN ID LPAREN fn-params RPAREN FUNCTION_ARROW EXCLAMATION block .

    $default  reduce using rule 12 (fn-def)


State 260

   11 fn-def: FN ID LPAREN fn-params RPAREN FUNCTION_ARROW ret block .

    $default  reduce using rule 11 (fn-def)


State 261

  146 type: LSQUARE type SEMICOLON LITDEC . RSQUARE

    RSQUARE  shift, and go to state 279


State 262

  149 type: BOX LT type GT .

    $default  reduce using rule 149 (type)


State 263

  163 enum-exps: exp COMMA enum-exps .

    $default  reduce using rule 163 (enum-exps)


State 264

  106 box-new: BOX PATH NEW LPAREN . exp RPAREN

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 280
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 265

  102 if: IF LPAREN exp RPAREN . block ELSE block
  103   | IF LPAREN exp RPAREN . block

    LCURLY  shift, and go to state 56

    block  go to state 281


State 266

   41 let: LET pat ASSIGNMENT exp .
   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 41 (let)


State 267

   40 let: LET pat COLON type . ASSIGNMENT exp
   42    | LET pat COLON type .

    ASSIGNMENT  shift, and go to state 282

    $default  reduce using rule 42 (let)


State 268

  109 match: MATCH LPAREN exp RPAREN . LCURLY match-arms RCURLY

    LCURLY  shift, and go to state 283


State 269

  104 while: WHILE LPAREN exp RPAREN . block

    LCURLY  shift, and go to state 56

    block  go to state 284


State 270

  100 exps: exp COMMA . exps

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 228
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    exps         go to state 285
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 271

   98 fn-call: ID LPAREN exps RPAREN .

    $default  reduce using rule 98 (fn-call)


State 272

  162 lit-enum: ID PATH ID LPAREN . enum-exps RPAREN

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 166
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    enum-exps    go to state 286
    lit-struct   go to state 135
    lit-array    go to state 136


State 273

  168 id-exp-annot: ID COLON . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 287
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 274

  165 lit-struct: ID LCURLY id-exp-annots RCURLY .

    $default  reduce using rule 165 (lit-struct)


State 275

  166 id-exp-annots: id-exp-annot COMMA . id-exp-annots

    ID  shift, and go to state 231

    id-exp-annots  go to state 288
    id-exp-annot   go to state 233


State 276

  107 arr-index: exp LSQUARE exp RSQUARE .

    $default  reduce using rule 107 (arr-index)


State 277

  135 ctor-elmts: pat COMMA . ctor-elmts

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat         go to state 255
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    ctor-elmts  go to state 289
    prim-lit    go to state 45
    lit-bool    go to state 46


State 278

  130 pat-enum: ID PATH ID LPAREN ctor-elmts RPAREN .

    $default  reduce using rule 130 (pat-enum)


State 279

  146 type: LSQUARE type SEMICOLON LITDEC RSQUARE .

    $default  reduce using rule 146 (type)


State 280

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  106 box-new: BOX PATH NEW LPAREN exp . RPAREN
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    RPAREN         shift, and go to state 290
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202


State 281

  102 if: IF LPAREN exp RPAREN block . ELSE block
  103   | IF LPAREN exp RPAREN block .

    ELSE  shift, and go to state 291

    $default  reduce using rule 103 (if)


State 282

   40 let: LET pat COLON type ASSIGNMENT . exp

    NEGATIVE_SIGN  shift, and go to state 85
    ASTERISK       shift, and go to state 86
    EXCLAMATION    shift, and go to state 87
    ADDRESS        shift, and go to state 88
    LPAREN         shift, and go to state 89
    LSQUARE        shift, and go to state 90
    BOX            shift, and go to state 92
    IF             shift, and go to state 93
    LOOP           shift, and go to state 95
    MATCH          shift, and go to state 96
    WHILE          shift, and go to state 98
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 99
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    exp          go to state 292
    or           go to state 104
    and          go to state 105
    eq           go to state 106
    neq          go to state 107
    lt           go to state 108
    gt           go to state 109
    leq          go to state 110
    geq          go to state 111
    add          go to state 112
    sub          go to state 113
    mul          go to state 114
    div          go to state 115
    rem          go to state 116
    neg          go to state 117
    not          go to state 118
    deref        go to state 119
    addr-of      go to state 120
    addr-of-mut  go to state 121
    assign       go to state 122
    fn-call      go to state 123
    if           go to state 124
    while        go to state 125
    loop         go to state 126
    box-new      go to state 127
    arr-index    go to state 128
    flup         go to state 129
    match        go to state 130
    literal      go to state 131
    prim-lit     go to state 132
    comp-lit     go to state 133
    lit-bool     go to state 46
    lit-enum     go to state 134
    lit-struct   go to state 135
    lit-array    go to state 136


State 283

  109 match: MATCH LPAREN exp RPAREN LCURLY . match-arms RCURLY

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    match-arms  go to state 293
    match-arm   go to state 294
    pat-or      go to state 295
    pat         go to state 296
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 284

  104 while: WHILE LPAREN exp RPAREN block .

    $default  reduce using rule 104 (while)


State 285

  100 exps: exp COMMA exps .

    $default  reduce using rule 100 (exps)


State 286

  162 lit-enum: ID PATH ID LPAREN enum-exps . RPAREN

    RPAREN  shift, and go to state 297


State 287

   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp
  168 id-exp-annot: ID COLON exp .

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 168 (id-exp-annot)


State 288

  166 id-exp-annots: id-exp-annot COMMA id-exp-annots .

    $default  reduce using rule 166 (id-exp-annots)


State 289

  135 ctor-elmts: pat COMMA ctor-elmts .

    $default  reduce using rule 135 (ctor-elmts)


State 290

  106 box-new: BOX PATH NEW LPAREN exp RPAREN .

    $default  reduce using rule 106 (box-new)


State 291

  102 if: IF LPAREN exp RPAREN block ELSE . block

    LCURLY  shift, and go to state 56

    block  go to state 298


State 292

   40 let: LET pat COLON type ASSIGNMENT exp .
   74 or: exp . BOOL_OR exp
   75 and: exp . BOOL_AND exp
   76 eq: exp . EQ exp
   77 neq: exp . NE exp
   78 lt: exp . LT exp
   79 gt: exp . GT exp
   80 leq: exp . LE exp
   81 geq: exp . GE exp
   82 add: exp . ADD exp
   83 sub: exp . NEGATIVE_SIGN exp
   84 mul: exp . ASTERISK exp
   85 div: exp . DIV exp
   86 rem: exp . REM exp
   92 assign: exp . PLUS_ASSIGN exp
   93       | exp . SUB_ASSIGN exp
   94       | exp . MUL_ASSIGN exp
   95       | exp . DIV_ASSIGN exp
   96       | exp . REM_ASSIGN exp
   97       | exp . ASSIGNMENT exp
  107 arr-index: exp . LSQUARE exp RSQUARE
  108 flup: exp . DOT exp

    BOOL_OR        shift, and go to state 182
    BOOL_AND       shift, and go to state 183
    ADD            shift, and go to state 184
    NEGATIVE_SIGN  shift, and go to state 185
    ASTERISK       shift, and go to state 186
    DIV            shift, and go to state 187
    EQ             shift, and go to state 188
    NE             shift, and go to state 189
    REM            shift, and go to state 190
    LT             shift, and go to state 191
    GT             shift, and go to state 192
    LE             shift, and go to state 193
    GE             shift, and go to state 194
    ASSIGNMENT     shift, and go to state 195
    PLUS_ASSIGN    shift, and go to state 196
    SUB_ASSIGN     shift, and go to state 197
    MUL_ASSIGN     shift, and go to state 198
    DIV_ASSIGN     shift, and go to state 199
    REM_ASSIGN     shift, and go to state 200
    LSQUARE        shift, and go to state 201
    DOT            shift, and go to state 202

    $default  reduce using rule 40 (let)


State 293

  109 match: MATCH LPAREN exp RPAREN LCURLY match-arms . RCURLY

    RCURLY  shift, and go to state 299


State 294

  110 match-arms: match-arm . COMMA match-arms
  111           | match-arm .

    COMMA  shift, and go to state 300

    $default  reduce using rule 111 (match-arms)


State 295

  112 match-arm: pat-or . MATCH_ARROW block

    MATCH_ARROW  shift, and go to state 301


State 296

  113 pat-or: pat . BITOR pat-or
  114       | pat .

    BITOR  shift, and go to state 302

    $default  reduce using rule 114 (pat-or)


State 297

  162 lit-enum: ID PATH ID LPAREN enum-exps RPAREN .

    $default  reduce using rule 162 (lit-enum)


State 298

  102 if: IF LPAREN exp RPAREN block ELSE block .

    $default  reduce using rule 102 (if)


State 299

  109 match: MATCH LPAREN exp RPAREN LCURLY match-arms RCURLY .

    $default  reduce using rule 109 (match)


State 300

  110 match-arms: match-arm COMMA . match-arms

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    match-arms  go to state 303
    match-arm   go to state 294
    pat-or      go to state 295
    pat         go to state 296
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 301

  112 match-arm: pat-or MATCH_ARROW . block

    LCURLY  shift, and go to state 56

    block  go to state 304


State 302

  113 pat-or: pat BITOR . pat-or

    NEGATIVE_SIGN  shift, and go to state 22
    ADDRESS        shift, and go to state 23
    LPAREN         shift, and go to state 24
    MUT            shift, and go to state 26
    LSQUARE        shift, and go to state 27
    REF            shift, and go to state 28
    UNDERSCORE     shift, and go to state 29
    LITDEC         shift, and go to state 30
    ID             shift, and go to state 31
    LITSTR         shift, and go to state 32
    LITCHAR        shift, and go to state 33
    FALS           shift, and go to state 34
    TRU            shift, and go to state 35

    pat-or      go to state 305
    pat         go to state 296
    name-bind   go to state 40
    pat-deref   go to state 41
    pat-arr     go to state 42
    pat-enum    go to state 43
    pat-struct  go to state 44
    prim-lit    go to state 45
    lit-bool    go to state 46


State 303

  110 match-arms: match-arm COMMA match-arms .

    $default  reduce using rule 110 (match-arms)


State 304

  112 match-arm: pat-or MATCH_ARROW block .

    $default  reduce using rule 112 (match-arm)


State 305

  113 pat-or: pat BITOR pat-or .

    $default  reduce using rule 113 (pat-or)
